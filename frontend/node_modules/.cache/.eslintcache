[{"C:\\Bazan_Fullstack-main\\frontend\\src\\index.js":"1","C:\\Bazan_Fullstack-main\\frontend\\src\\components\\GetHiraganaRomajiAndImage.js":"2","C:\\Bazan_Fullstack-main\\frontend\\src\\components\\BankTransNoAuthHook.js":"3","C:\\Bazan_Fullstack-main\\frontend\\src\\components\\Hiragana.js":"4","C:\\Bazan_Fullstack-main\\frontend\\src\\components\\GetLastestScore.js":"5"},{"size":529,"mtime":1704998132300,"results":"6","hashOfConfig":"7"},{"size":5131,"mtime":1705338915304,"results":"8","hashOfConfig":"7"},{"size":6329,"mtime":1703868779000,"results":"9","hashOfConfig":"7"},{"size":2465,"mtime":1703868779000,"results":"10","hashOfConfig":"7"},{"size":2549,"mtime":1703868779000,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"hbl7r7",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},"C:\\Bazan_Fullstack-main\\frontend\\src\\index.js",[],[],[],"C:\\Bazan_Fullstack-main\\frontend\\src\\components\\GetHiraganaRomajiAndImage.js",["30","31","32","33","34","35","36","37","38"],[],"C:\\Bazan_Fullstack-main\\frontend\\src\\components\\BankTransNoAuthHook.js",[],[],"C:\\Bazan_Fullstack-main\\frontend\\src\\components\\Hiragana.js",["39","40","41"],[],"import axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useEffect, useState } from \"react\";\n\nexport default function GetLatestScores() {\n\n    const backendUrl = 'http://localhost:8081';\n    const [targetNumberOfLetter, setTargetNumberOfLetter] = useState(\"1\");\n    const [status, setStatus] = useState(\"OK\");\n    const [image, setImage] = useState(\"Brak Zdjęcia\");\n    const [romaji, setRomaji] = useState(\"Brak Litery\");\n    const [hiraganaId, setHiraganaId] = useState(\"1\");\n\n    async function getRecordById() {\n\n        await axios.post(`${backendUrl}/api/v1/gethiraganarecord/`)\n            .then(response => {\n                console.log(response.data);\n                let imageData = \"\";\n                let nameData = \"\";\n                let idFound = false;\n\n\n                response.data.forEach((e) => {\n                    let lid = e.id;\n                    let lhiraganaRomaji = e.hiraganaRomaji;\n                    let lhiraganaImage = e.hiraganaImage;\n                    let lhiraganaId = e.hiraganaId;\n\n                    let firstPartText = lhiraganaId.substring(0, (\"ERROR:\").length);\n\n\n                    if (firstPartText !== \"ERROR:\") {\n                        imageData = `${lhiraganaImage}\\n`;\n                        nameData = `${lhiraganaRomaji}\\n`;\n                        setStatus(\"OK\");\n                        setRomaji(nameData);\n                        setImage(imageData);\n                        idFound = true;\n                    }\n                    else {\n                        let secondPartText = lhiraganaId.substring((\"ERROR:\").length, lhiraganaId.length);\n                        setStatus(secondPartText);\n                        setRomaji(secondPartText);\n                        idFound = true;\n                    }\n                })\n\n            }).catch(err => {\n\n                let myerror = \"Błąd połaczenia sieciowego.\" + err;\n                setStatus(myerror);\n            });\n\n    }\n\n    const incrementTarget = () => {\n\n        setTargetNumberOfLetter(targetNumberOfLetter + 1);\n        getRecordById();\n\n    };\n\n    useEffect(() => {\n\n        getRecordById();\n\n    }, []);\n\n    return (\n\n        <div>\n\n            <button onClick={incrementTarget}>Pobierz Wynik</button>\n\n            <p>{targetNumberOfLetter}</p>\n            <p>{hiraganaId}</p>\n            <p>{status}</p>\n            <p>{romaji}</p>\n            <p>{image}</p>\n\n        </div>\n\n    );\n\n}\n","C:\\Bazan_Fullstack-main\\frontend\\src\\components\\GetLastestScore.js",["42"],[],"import axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useState } from \"react\";\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\n\nexport default function GetLatestScores() {\n\n    const backendUrl = 'http://localhost:8081';\n    const [status, setStatus] = useState(\"OK\");\n    const [textArea, setTextArea] = useState(\"Tu powinna być zawartość bazy danych, ale jak nie to mi wciąż nie działa\");\n\n    async function getScore() {\n\n        await axios.post(`${backendUrl}/api/v1/getlatestscore/`)\n            .then(response => {\n                console.log(response.data);\n\n                let scoresListText = \"\"\n\n                response.data.forEach((e) => {\n                    let lid = e.id;\n                    let lusername = e.username;\n                    let lhiraganaScore1 = e.hiraganaScore1;\n                    let lhiraganaScore2 = e.hiraganaScore2;\n                    let lhiraganaScore3 = e.hiraganaScore3;\n                    let lkatakanaScore1 = e.katakanaScore1;\n                    let lkatakanaScore2 = e.katakanaScore2;\n                    let lkatakanaScore3 = e.katakanaScore3;\n\n                    let firstPartText = lusername.substring(0, (\"ERROR:\").length);\n\n\n                    if (firstPartText !== \"ERROR:\") {\n                        scoresListText += `${lid}, ${lusername}, ${lhiraganaScore1}, ${lhiraganaScore2}, ${lhiraganaScore3}, ${lkatakanaScore1}, ${lkatakanaScore2}, ${lkatakanaScore3}\\n`;\n                        setTextArea(scoresListText);\n                        setStatus(\"OK\");\n                    }\n                    else {\n                        let secondPartText = lusername.substring((\"ERROR:\").length, lusername.length);\n                        scoresListText = lusername + \"\\n\";\n                        setTextArea(scoresListText);\n                        setStatus(secondPartText);\n                    }\n                })\n\n            }).catch(err => {\n\n                let myerror = \"Błąd połaczenia sieciowego.\" + err;\n                setStatus(myerror);\n            });\n\n    }\n\n    return (\n\n        <Container>\n\n            <Button variant=\"primary\" onClick={getScore}>  Odczytaj aktualną listę przelewów  </Button>\n\n            <p></p>\n\n            <Form.Control as=\"textarea\" rows={8} type=\"text\" value={textArea} placeholder=\"\" onChange={(e) => setTextArea(e.target.value)} spellCheck=\"false\" />\n\n            <p></p>\n\n        </Container>\n\n    );\n\n}\n",{"ruleId":"43","severity":1,"message":"44","line":12,"column":12,"nodeType":"45","messageId":"46","endLine":12,"endColumn":18},{"ruleId":"43","severity":1,"message":"47","line":12,"column":20,"nodeType":"45","messageId":"46","endLine":12,"endColumn":29},{"ruleId":"43","severity":1,"message":"48","line":13,"column":12,"nodeType":"45","messageId":"46","endLine":13,"endColumn":19},{"ruleId":"43","severity":1,"message":"49","line":13,"column":21,"nodeType":"45","messageId":"46","endLine":13,"endColumn":31},{"ruleId":"43","severity":1,"message":"50","line":18,"column":12,"nodeType":"45","messageId":"46","endLine":18,"endColumn":22},{"ruleId":"43","severity":1,"message":"51","line":18,"column":24,"nodeType":"45","messageId":"46","endLine":18,"endColumn":37},{"ruleId":"43","severity":1,"message":"52","line":20,"column":11,"nodeType":"45","messageId":"46","endLine":20,"endColumn":28},{"ruleId":"53","severity":1,"message":"54","line":97,"column":8,"nodeType":"55","endLine":97,"endColumn":16,"suggestions":"56"},{"ruleId":"53","severity":1,"message":"57","line":119,"column":8,"nodeType":"55","endLine":119,"endColumn":30,"suggestions":"58"},{"ruleId":"43","severity":1,"message":"59","line":12,"column":24,"nodeType":"45","messageId":"46","endLine":12,"endColumn":37},{"ruleId":"43","severity":1,"message":"60","line":21,"column":21,"nodeType":"45","messageId":"46","endLine":21,"endColumn":28},{"ruleId":"43","severity":1,"message":"61","line":25,"column":25,"nodeType":"45","messageId":"46","endLine":25,"endColumn":28},{"ruleId":"43","severity":1,"message":"62","line":11,"column":12,"nodeType":"45","messageId":"46","endLine":11,"endColumn":18},"no-unused-vars","'image2' is assigned a value but never used.","Identifier","unusedVar","'setImage2' is assigned a value but never used.","'romaji2' is assigned a value but never used.","'setRomaji2' is assigned a value but never used.","'wasClicked' is assigned a value but never used.","'setWasClicked' is assigned a value but never used.","'randomWrongAnswer' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getRecordById'. Either include it or remove the dependency array.","ArrayExpression",["63"],"React Hook useEffect has missing dependencies: 'getRecordById' and 'randomCorrectAnswer'. Either include them or remove the dependency array.",["64"],"'setHiraganaId' is assigned a value but never used.","'idFound' is assigned a value but never used.","'lid' is assigned a value but never used.","'status' is assigned a value but never used.",{"desc":"65","fix":"66"},{"desc":"67","fix":"68"},"Update the dependencies array to be: [getRecordById, romaji]",{"range":"69","text":"70"},"Update the dependencies array to be: [getRecordById, randomCorrectAnswer, targetNumberOfLetter]",{"range":"71","text":"72"},[3219,3227],"[getRecordById, romaji]",[3603,3625],"[getRecordById, randomCorrectAnswer, targetNumberOfLetter]"]
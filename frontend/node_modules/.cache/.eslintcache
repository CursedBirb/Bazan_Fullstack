[{"C:\\Bazan_Fullstack-main\\frontend\\src\\index.js":"1","C:\\Bazan_Fullstack-main\\frontend\\src\\components\\GetHiraganaRomajiAndImage.js":"2","C:\\Bazan_Fullstack-main\\frontend\\src\\components\\BankTransNoAuthHook.js":"3","C:\\Bazan_Fullstack-main\\frontend\\src\\components\\Hiragana.js":"4","C:\\Bazan_Fullstack-main\\frontend\\src\\components\\GetLastestScore.js":"5","C:\\Bazan_Fullstack-main\\frontend\\src\\components\\LetterList.js":"6","C:\\Bazan_Fullstack-main\\frontend\\src\\components\\AddHiraganaScore.js":"7"},{"size":643,"mtime":1705569878607,"results":"8","hashOfConfig":"9"},{"size":5394,"mtime":1705481166123,"results":"10","hashOfConfig":"9"},{"size":6329,"mtime":1703868779000,"results":"11","hashOfConfig":"9"},{"size":2465,"mtime":1703868779000,"results":"12","hashOfConfig":"9"},{"size":2549,"mtime":1705481185227,"results":"13","hashOfConfig":"9"},{"size":319,"mtime":1705435361395,"results":"14","hashOfConfig":"9"},{"size":2833,"mtime":1705569920553,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hbl7r7",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Bazan_Fullstack-main\\frontend\\src\\index.js",[],[],"C:\\Bazan_Fullstack-main\\frontend\\src\\components\\GetHiraganaRomajiAndImage.js",["38","39"],[],"C:\\Bazan_Fullstack-main\\frontend\\src\\components\\BankTransNoAuthHook.js",[],[],"C:\\Bazan_Fullstack-main\\frontend\\src\\components\\Hiragana.js",["40","41","42"],[],"import axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useEffect, useState } from \"react\";\n\nexport default function GetLatestScores() {\n\n    const backendUrl = 'http://localhost:8081';\n    const [targetNumberOfLetter, setTargetNumberOfLetter] = useState(\"1\");\n    const [status, setStatus] = useState(\"OK\");\n    const [image, setImage] = useState(\"Brak Zdjęcia\");\n    const [romaji, setRomaji] = useState(\"Brak Litery\");\n    const [hiraganaId, setHiraganaId] = useState(\"1\");\n\n    async function getRecordById() {\n\n        await axios.post(`${backendUrl}/api/v1/gethiraganarecord/`)\n            .then(response => {\n                console.log(response.data);\n                let imageData = \"\";\n                let nameData = \"\";\n                let idFound = false;\n\n\n                response.data.forEach((e) => {\n                    let lid = e.id;\n                    let lhiraganaRomaji = e.hiraganaRomaji;\n                    let lhiraganaImage = e.hiraganaImage;\n                    let lhiraganaId = e.hiraganaId;\n\n                    let firstPartText = lhiraganaId.substring(0, (\"ERROR:\").length);\n\n\n                    if (firstPartText !== \"ERROR:\") {\n                        imageData = `${lhiraganaImage}\\n`;\n                        nameData = `${lhiraganaRomaji}\\n`;\n                        setStatus(\"OK\");\n                        setRomaji(nameData);\n                        setImage(imageData);\n                        idFound = true;\n                    }\n                    else {\n                        let secondPartText = lhiraganaId.substring((\"ERROR:\").length, lhiraganaId.length);\n                        setStatus(secondPartText);\n                        setRomaji(secondPartText);\n                        idFound = true;\n                    }\n                })\n\n            }).catch(err => {\n\n                let myerror = \"Błąd połaczenia sieciowego.\" + err;\n                setStatus(myerror);\n            });\n\n    }\n\n    const incrementTarget = () => {\n\n        setTargetNumberOfLetter(targetNumberOfLetter + 1);\n        getRecordById();\n\n    };\n\n    useEffect(() => {\n\n        getRecordById();\n\n    }, []);\n\n    return (\n\n        <div>\n\n            <button onClick={incrementTarget}>Pobierz Wynik</button>\n\n            <p>{targetNumberOfLetter}</p>\n            <p>{hiraganaId}</p>\n            <p>{status}</p>\n            <p>{romaji}</p>\n            <p>{image}</p>\n\n        </div>\n\n    );\n\n}\n","C:\\Bazan_Fullstack-main\\frontend\\src\\components\\GetLastestScore.js",["43"],[],"C:\\Bazan_Fullstack-main\\frontend\\src\\components\\LetterList.js",[],[],"C:\\Bazan_Fullstack-main\\frontend\\src\\components\\AddHiraganaScore.js",[],[],{"ruleId":"44","severity":1,"message":"45","line":80,"column":8,"nodeType":"46","endLine":80,"endColumn":16,"suggestions":"47"},{"ruleId":"44","severity":1,"message":"48","line":99,"column":8,"nodeType":"46","endLine":99,"endColumn":30,"suggestions":"49"},{"ruleId":"50","severity":1,"message":"51","line":12,"column":24,"nodeType":"52","messageId":"53","endLine":12,"endColumn":37},{"ruleId":"50","severity":1,"message":"54","line":21,"column":21,"nodeType":"52","messageId":"53","endLine":21,"endColumn":28},{"ruleId":"50","severity":1,"message":"55","line":25,"column":25,"nodeType":"52","messageId":"53","endLine":25,"endColumn":28},{"ruleId":"50","severity":1,"message":"56","line":11,"column":12,"nodeType":"52","messageId":"53","endLine":11,"endColumn":18},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getRecordById'. Either include it or remove the dependency array.","ArrayExpression",["57"],"React Hook useEffect has missing dependencies: 'generateRandomWrongAnswers', 'getRecordById', and 'randomCorrectAnswer'. Either include them or remove the dependency array.",["58"],"no-unused-vars","'setHiraganaId' is assigned a value but never used.","Identifier","unusedVar","'idFound' is assigned a value but never used.","'lid' is assigned a value but never used.","'status' is assigned a value but never used.",{"desc":"59","fix":"60"},{"desc":"61","fix":"62"},"Update the dependencies array to be: [getRecordById, romaji]",{"range":"63","text":"64"},"Update the dependencies array to be: [generateRandomWrongAnswers, getRecordById, randomCorrectAnswer, targetNumberOfLetter]",{"range":"65","text":"66"},[2727,2735],"[getRecordById, romaji]",[3045,3067],"[generateRandomWrongAnswers, getRecordById, randomCorrectAnswer, targetNumberOfLetter]"]
[{"C:\\Bazan_Fullstack-main\\frontend\\src\\index.js":"1","C:\\Bazan_Fullstack-main\\frontend\\src\\components\\AddHiraganaScore.js":"2","C:\\Bazan_Fullstack-main\\frontend\\src\\components\\Login.js":"3","C:\\Bazan_Fullstack-main\\frontend\\src\\components\\GetLastestScore.js":"4","C:\\Bazan_Fullstack-main\\frontend\\src\\components\\GetHiraganaRomajiAndImage.js":"5","C:\\Bazan_Fullstack-main\\frontend\\src\\components\\LetterList.js":"6","C:\\Bazan_Fullstack-main\\frontend\\src\\components\\LoginPage.js":"7","C:\\Bazan_Fullstack-main\\frontend\\src\\components\\HiraganaTestPage.js":"8","C:\\Bazan_Fullstack-main\\frontend\\src\\components\\MainMenuPage.js":"9","C:\\Bazan_Fullstack-main\\frontend\\src\\components\\ModeSelectionPage.js":"10","C:\\Bazan_Fullstack-main\\frontend\\src\\components\\NewAccount.js":"11","C:\\Bazan_Fullstack-main\\frontend\\src\\components\\NewUserPage.js":"12","C:\\Bazan_Fullstack-main\\frontend\\src\\components\\backendAdress.js":"13"},{"size":588,"mtime":1705861552032,"results":"14","hashOfConfig":"15"},{"size":2224,"mtime":1705837415846,"results":"16","hashOfConfig":"15"},{"size":3745,"mtime":1705865960138,"results":"17","hashOfConfig":"15"},{"size":3268,"mtime":1707226810658,"results":"18","hashOfConfig":"15"},{"size":7449,"mtime":1707226921445,"results":"19","hashOfConfig":"15"},{"size":316,"mtime":1705570912000,"results":"20","hashOfConfig":"15"},{"size":315,"mtime":1705861682704,"results":"21","hashOfConfig":"15"},{"size":472,"mtime":1705856394938,"results":"22","hashOfConfig":"15"},{"size":2108,"mtime":1705866258018,"results":"23","hashOfConfig":"15"},{"size":492,"mtime":1705861690147,"results":"24","hashOfConfig":"15"},{"size":3373,"mtime":1707226854048,"results":"25","hashOfConfig":"15"},{"size":329,"mtime":1705866204876,"results":"26","hashOfConfig":"15"},{"size":125,"mtime":1707306471172,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"hbl7r7",{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Bazan_Fullstack-main\\frontend\\src\\index.js",[],[],"C:\\Bazan_Fullstack-main\\frontend\\src\\components\\AddHiraganaScore.js",["69","70","71","72","73","74","75"],[],"C:\\Bazan_Fullstack-main\\frontend\\src\\components\\Login.js",["76","77"],[],"C:\\Bazan_Fullstack-main\\frontend\\src\\components\\GetLastestScore.js",["78","79","80","81","82","83"],[],"C:\\Bazan_Fullstack-main\\frontend\\src\\components\\GetHiraganaRomajiAndImage.js",["84","85","86","87","88","89","90"],[],"import axios from 'axios';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React, { useEffect, useState } from \"react\";\r\nimport letters from './LetterList';\r\nimport backendAdress from './backendAdress';\r\n\r\nexport default function GetHiraganaRomajiAndImage() {\r\n\r\n    // const backendUrl = 'http://192.168.137.1:8081';\r\n    const [targetNumberOfLetter, setTargetNumberOfLetter] = useState(1);\r\n    const [status, setStatus] = useState(\"OK\");\r\n    const [image, setImage] = useState(\"Brak Zdjęcia\");\r\n    const [romaji, setRomaji] = useState(\"Brak Litery\");\r\n    const [score, setScore] = useState(0);\r\n    const [buttons, setButtons] = useState([\"Wolololo\", \"No Wolololo\", \"Would Wolololo\", \"Will Wolololo\"]);\r\n    const [correctAnswer, setCorrectAnswer] = useState(0);\r\n    const [answer, setAnswer] = useState(\"\");\r\n    const [wasClicked, setWasClicked] = useState(false);\r\n    const randomCorrectAnswer = Math.floor(Math.random() * 4);\r\n    const randomWrongAnswer = Math.floor(Math.random() * 46 + 1);\r\n    const [wrongAnswers, setWrongAnswers] = useState([12, 6, 7, 23]);\r\n    const [showScore, setShowScore] = useState(false);\r\n    const [textArea, setTextArea] = useState(\"\");\r\n\r\n    const imageName = image;\r\n    const imagePath = process.env.PUBLIC_URL + `./images/${imageName}.png`;\r\n\r\n    let username = localStorage.getItem('userName');\r\n    let password = localStorage.getItem('password');\r\n\r\n    async function getRecordById() {\r\n\r\n        try {\r\n\r\n            const response = await axios.post(`${backendAdress}/api/gethiraganarecord/`,\r\n            { username, password });\r\n            console.log(response.data);\r\n            let idFound = false;\r\n    \r\n            response.data.forEach((e) => {\r\n            // for (let i = 1; i < (47); i++) {\r\n            //     let e = response.data[i];\r\n\r\n                let lid = e.id;\r\n                let lhiraganaRomaji = e.hiraganaRomaji;\r\n                let lhiraganaImage = e.hiraganaImage;\r\n        \r\n                let firstPartText = lhiraganaRomaji.substring(0, \"ERROR:\".length);\r\n        \r\n                if (firstPartText !== \"ERROR:\" && parseInt(lid, 10) === targetNumberOfLetter) {\r\n\r\n                    setStatus(\"OK\");\r\n                    setRomaji(`${lhiraganaRomaji}`);\r\n                    setImage(`${lhiraganaImage}`);\r\n                    idFound = true;\r\n\r\n                    initializeValues();\r\n\r\n                } else if (firstPartText === \"ERROR:\" && parseInt(lid, 10) === targetNumberOfLetter) {\r\n\r\n                    let secondPartText = lhiraganaRomaji.substring(\"ERROR:\".length, lhiraganaRomaji.length);\r\n                    setStatus(secondPartText);\r\n                    setRomaji(secondPartText);\r\n                    idFound = true;\r\n                }\r\n\r\n            });\r\n            //}\r\n    \r\n            if (!idFound) {\r\n\r\n                setStatus(\"Id nie znaleziono\");\r\n\r\n            }\r\n\r\n        } catch (err) {\r\n\r\n            let myerror = \"Błąd połączenia sieciowego.\" + err;\r\n            setStatus(myerror);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        getRecordById();\r\n        // initializeValues();\r\n\r\n    }, [romaji]);\r\n\r\n    const incrementTarget = () => {\r\n\r\n        setTargetNumberOfLetter((prevTarget) => {\r\n\r\n            return prevTarget + 1;\r\n\r\n        });\r\n\r\n    };\r\n\r\n    useEffect(() => {\r\n\r\n        setCorrectAnswer(randomCorrectAnswer);\r\n\r\n        generateRandomWrongAnswers();\r\n        getRecordById();\r\n\r\n        \r\n        if(targetNumberOfLetter > 46) {\r\n\r\n            addHiraganaScore();\r\n            setShowScore(true);\r\n            setAnswer(\"Test Has Ended. Your score has been saved. Click get all your scores to know your % rating\");\r\n\r\n            return;\r\n\r\n        }\r\n\r\n        setShowScore(false);\r\n\r\n    }, [targetNumberOfLetter]);\r\n\r\n    const initializeValues = () => {\r\n\r\n        generateRandomWrongAnswers();\r\n\r\n        const newButtons = [...buttons];\r\n\r\n        for (let i = 0; i <= 3; i++) {\r\n\r\n            newButtons[i] = letters[wrongAnswers[i]];\r\n            console.log(letters[randomWrongAnswer]);\r\n\r\n        }\r\n\r\n        setAnswer(\"\");\r\n        // setCorrectAnswer(randomCorrectAnswer);\r\n        newButtons[correctAnswer] = romaji;\r\n        setButtons(newButtons);\r\n        setWasClicked(false);\r\n        console.log(\"Your score is \" + score);\r\n\r\n    };\r\n\r\n    const checkIfCorrectAnswer = (index) => {\r\n\r\n        if(wasClicked === true) {\r\n\r\n            return;\r\n\r\n        }\r\n\r\n        if (index === correctAnswer) {\r\n\r\n            setAnswer(\"Correct answer\");\r\n\r\n            setScore((prevTarget) => {\r\n\r\n                return prevTarget +1;\r\n    \r\n            });\r\n\r\n        } else if (index !== correctAnswer) {\r\n        \r\n            setAnswer(\"Wrong answer\");\r\n\r\n        }\r\n\r\n        setWasClicked(true);\r\n\r\n    };\r\n\r\n    const generateRandomWrongAnswers = () => {\r\n\r\n        const uniqueWrongAnswers = [];\r\n\r\n        while (uniqueWrongAnswers.length < 5) {\r\n\r\n            const randomWrongAnswer = Math.floor(Math.random() * 46 + 1);\r\n            \r\n            if (!uniqueWrongAnswers.includes(randomWrongAnswer, targetNumberOfLetter) || (letters[randomWrongAnswer] === romaji) || randomWrongAnswer > 0 || randomWrongAnswer <= 46) {\r\n\r\n                uniqueWrongAnswers.push(randomWrongAnswer);\r\n                \r\n            } else console.log(\"An\" + randomWrongAnswer);\r\n            \r\n        }\r\n\r\n        setWrongAnswers(uniqueWrongAnswers);\r\n\r\n    };\r\n\r\n    async function addHiraganaScore() {\r\n\r\n        if ((username.length > 0) && (score > 0)) {\r\n            await axios.post(`${backendAdress}/api/addhiraganascore/`,\r\n                { username, password, score }\r\n            )\r\n                .then(response => {\r\n                    let text = response.data;\r\n                    setStatus(text);\r\n                }).catch(err => {\r\n                    let myerror = \"Błąd połaczenia sieciowego.\" + err;\r\n                    setStatus(myerror);\r\n                });\r\n        }\r\n        else {\r\n            console.log(\"Username: \" + username + \", score: \" + score);\r\n            setStatus(\"Żadna z danych wstawianego przelewu nie może być pusta\");\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        addHiraganaScore();\r\n        event.preventDefault();\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n\r\n            \r\n\r\n            {/* <p>{targetNumberOfLetter}</p>\r\n            <p>{status}</p>\r\n            <p>{romaji}</p>\r\n            <p>{image}</p> */}\r\n\r\n            <img src={imagePath} alt=\"Hiragana letter image\" />\r\n            <p></p>\r\n\r\n            {buttons.map((button, index) => (\r\n                <button key={index} onClick={() => checkIfCorrectAnswer(index)}>\r\n                    {button}\r\n                </button>\r\n            ))}\r\n\r\n            <p>{answer}</p>\r\n\r\n            <button onClick={incrementTarget}>Next question</button>\r\n\r\n            {showScore && <p>Twój wynik to: {score} z 46 możliwych</p>}\r\n\r\n            {/* <Form onSubmit={handleSubmit}>\r\n                <Form.Group className=\"auto\" onSubmit={handleSubmit}>\r\n                    <Button variant=\"primary\" type=\"submit\">  Dodaj  </Button>\r\n                </Form.Group>\r\n                <p></p>\r\n            </Form >\r\n\r\n            <p></p>\r\n\r\n            <Form.Control as=\"textarea\" rows={8} type=\"text\" value={textArea} placeholder=\"\" onChange={(e) => setTextArea(e.target.value)} spellCheck=\"false\" /> */}\r\n\r\n        </div>\r\n\r\n    );\r\n    \r\n}",[],"C:\\Bazan_Fullstack-main\\frontend\\src\\components\\LetterList.js",[],[],"C:\\Bazan_Fullstack-main\\frontend\\src\\components\\LoginPage.js",[],[],"C:\\Bazan_Fullstack-main\\frontend\\src\\components\\HiraganaTestPage.js",[],[],"C:\\Bazan_Fullstack-main\\frontend\\src\\components\\MainMenuPage.js",[],[],"C:\\Bazan_Fullstack-main\\frontend\\src\\components\\ModeSelectionPage.js",[],[],"C:\\Bazan_Fullstack-main\\frontend\\src\\components\\NewAccount.js",[],[],"C:\\Bazan_Fullstack-main\\frontend\\src\\components\\NewUserPage.js",[],[],"C:\\Bazan_Fullstack-main\\frontend\\src\\components\\backendAdress.js",[],[],{"ruleId":"91","severity":1,"message":"92","line":11,"column":12,"nodeType":"93","messageId":"94","endLine":11,"endColumn":18},{"ruleId":"91","severity":1,"message":"95","line":13,"column":12,"nodeType":"93","messageId":"94","endLine":13,"endColumn":23},{"ruleId":"91","severity":1,"message":"96","line":13,"column":25,"nodeType":"93","messageId":"94","endLine":13,"endColumn":39},{"ruleId":"91","severity":1,"message":"97","line":14,"column":12,"nodeType":"93","messageId":"94","endLine":14,"endColumn":28},{"ruleId":"91","severity":1,"message":"98","line":14,"column":30,"nodeType":"93","messageId":"94","endLine":14,"endColumn":49},{"ruleId":"91","severity":1,"message":"99","line":16,"column":9,"nodeType":"93","messageId":"94","endLine":16,"endColumn":17},{"ruleId":"100","severity":1,"message":"101","line":24,"column":24,"nodeType":"93","messageId":"102","endLine":24,"endColumn":32},{"ruleId":"91","severity":1,"message":"103","line":60,"column":14,"nodeType":"93","messageId":"94","endLine":60,"endColumn":30},{"ruleId":"91","severity":1,"message":"104","line":64,"column":14,"nodeType":"93","messageId":"94","endLine":64,"endColumn":34},{"ruleId":"91","severity":1,"message":"92","line":9,"column":12,"nodeType":"93","messageId":"94","endLine":9,"endColumn":18},{"ruleId":"91","severity":1,"message":"105","line":10,"column":12,"nodeType":"93","messageId":"94","endLine":10,"endColumn":20},{"ruleId":"91","severity":1,"message":"106","line":10,"column":22,"nodeType":"93","messageId":"94","endLine":10,"endColumn":33},{"ruleId":"91","severity":1,"message":"107","line":11,"column":19,"nodeType":"93","messageId":"94","endLine":11,"endColumn":27},{"ruleId":"91","severity":1,"message":"108","line":12,"column":14,"nodeType":"93","messageId":"94","endLine":12,"endColumn":25},{"ruleId":"91","severity":1,"message":"109","line":31,"column":17,"nodeType":"93","messageId":"94","endLine":31,"endColumn":31},{"ruleId":"91","severity":1,"message":"92","line":11,"column":12,"nodeType":"93","messageId":"94","endLine":11,"endColumn":18},{"ruleId":"91","severity":1,"message":"105","line":23,"column":12,"nodeType":"93","messageId":"94","endLine":23,"endColumn":20},{"ruleId":"91","severity":1,"message":"106","line":23,"column":22,"nodeType":"93","messageId":"94","endLine":23,"endColumn":33},{"ruleId":"110","severity":1,"message":"111","line":90,"column":8,"nodeType":"112","endLine":90,"endColumn":16,"suggestions":"113"},{"ruleId":"110","severity":1,"message":"114","line":122,"column":8,"nodeType":"112","endLine":122,"endColumn":30,"suggestions":"115"},{"ruleId":"91","severity":1,"message":"116","line":214,"column":11,"nodeType":"93","messageId":"94","endLine":214,"endColumn":23},{"ruleId":"117","severity":1,"message":"118","line":230,"column":13,"nodeType":"119","endLine":230,"endColumn":64},"no-unused-vars","'status' is assigned a value but never used.","Identifier","unusedVar","'newUsername' is assigned a value but never used.","'setNewUsername' is assigned a value but never used.","'newHiraganaScore' is assigned a value but never used.","'setNewHiraganaScore' is assigned a value but never used.","'username' is assigned a value but never used.","no-use-before-define","'username' was used before it was defined.","usedBeforeDefined","'handleChangeUser' is defined but never used.","'handleChangePassword' is defined but never used.","'textArea' is assigned a value but never used.","'setTextArea' is assigned a value but never used.","'setWynik' is assigned a value but never used.","'forceUpdate' is assigned a value but never used.","'scoresListText' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getRecordById'. Either include it or remove the dependency array.","ArrayExpression",["120"],"React Hook useEffect has missing dependencies: 'addHiraganaScore', 'generateRandomWrongAnswers', 'getRecordById', and 'randomCorrectAnswer'. Either include them or remove the dependency array.",["121"],"'handleSubmit' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement",{"desc":"122","fix":"123"},{"desc":"124","fix":"125"},"Update the dependencies array to be: [getRecordById, romaji]",{"range":"126","text":"127"},"Update the dependencies array to be: [addHiraganaScore, generateRandomWrongAnswers, getRecordById, randomCorrectAnswer, targetNumberOfLetter]",{"range":"128","text":"129"},[3143,3151],"[getRecordById, romaji]",[3768,3790],"[addHiraganaScore, generateRandomWrongAnswers, getRecordById, randomCorrectAnswer, targetNumberOfLetter]"]
{"ast":null,"code":"import _classCallCheck from\"C:/SKRYPTY/KROSNO/TypeScript/ProjektTS/PrzykladyTSReact/myreactapp/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"C:/SKRYPTY/KROSNO/TypeScript/ProjektTS/PrzykladyTSReact/myreactapp/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _assertThisInitialized from\"C:/SKRYPTY/KROSNO/TypeScript/ProjektTS/PrzykladyTSReact/myreactapp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";import _inherits from\"C:/SKRYPTY/KROSNO/TypeScript/ProjektTS/PrzykladyTSReact/myreactapp/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"C:/SKRYPTY/KROSNO/TypeScript/ProjektTS/PrzykladyTSReact/myreactapp/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import React,{Component}from\"react\";//Demonstracja cyklu życia komponentu\n//UWAGA: Dla zobaczenia wyniku działania console.log trzeba \n//użyć Chroma i włączyć w nim \"Narzedzia dla developerów\" (Ctrl+Shift+I)\nimport{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";;;var MyComponentLife=/*#__PURE__*/function(_ref){_inherits(MyComponentLife,_ref);var _super=_createSuper(MyComponentLife);function MyComponentLife(props){var _this;_classCallCheck(this,MyComponentLife);_this=_super.call(this,props);_this.state={counter:0};_this.increase=_this.increase.bind(_assertThisInitialized(_this));// etap wygenerowania stanu początkowego komponentu\nreturn _this;}_createClass(MyComponentLife,[{key:\"increase\",value:function increase(){this.setState(function(prevState){return{counter:prevState.counter+1};});}},{key:\"getSnapshotBeforeUpdate\",value:function getSnapshotBeforeUpdate(prevProps,prevState){// Wykorzystywana jest do wykonania operacji przed aktualizacją komponentu\nconsole.log(\"getSnapshotBeforeUpdate - PRZED AKTUALIZACJĄ\");return null;}},{key:\"componentDidMount\",value:function componentDidMount(){// Wywoływana, gdy komponent został utworzony, czyli po pierwszym wywołaniu\n// render(). Służy do wywoływania operacji inicjujących, np. za pomocą HTTP\nconsole.log(\"componentDidMount - MONTOWANIE\");}},{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps,prevState){// Przykładowe użycie — wykonywanie akcji na podstawie informacji, czy zmienione\n// zostały props (właściwości), np. wysłanie ponownego żądania HTTP, jeśli wykryto,\n// iż komponent otrzymał nową wartość props\n//Wykonywane po aktualizacji komponentu\nconsole.log(\"componentDidUpdate - PO AKTUALIZACJI\");}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){// Metoda używana w momencie usuwania komponentu lub na początku przy odświeżaniu\nconsole.log(\"componentWillUnmount - USUWAM KOMPONENT\");}},{key:\"shouldComponentUpdate\",value:function shouldComponentUpdate(nextProps,nextState){// Zwraca true lub false, decyduje o tym, czy komponent ma ponownie zostać\n// wyrenderowany (wyświetlony). Dzięki niej możemy np. z powodów wydajnościowych\n// zablokować ponowne renderowane. Uruchamiana jest w momencie uzyskania nowych\n// props lub zmiany stanu\n//Tutaj dla przykładu, właczamy aktualizację widoku tylko wtedy, gdy wartość licznika przed zmianą jest liczbą nieparzystą\n//Zatem pokazywane są tylko liczby parzyste (po zmianie)\nif(this.state.counter%2==0){console.log(\"   shouldComponentUpdate - BRAK AKTUALIZACJI\");return false;}else{console.log(\"   shouldComponentUpdate - Zlecenie AKTUALIZACJI\");return true;}}//Wyświetlenie lub aktualizacja widoku komponentu\n},{key:\"render\",value:function render(){return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"h3\",{children:[\"Stan licznika: \",this.state.counter]}),/*#__PURE__*/_jsx(\"button\",{onClick:this.increase,children:\"Zwi\\u0119ksz o jeden\"})]});}}],[{key:\"getDerivedStateFromProps\",value:function getDerivedStateFromProps(props,state){// Aktualizacja stanu na skutek zmiany props\nconsole.log(\"getDerivedStateFromProps - sprawdzenie props\");return null;}}]);return MyComponentLife;}(Component);export default MyComponentLife;","map":{"version":3,"names":["React","Component","MyComponentLife","props","state","counter","increase","bind","setState","prevState","prevProps","console","log","nextProps","nextState"],"sources":["C:/SKRYPTY/KROSNO/TypeScript/ProjektTS/PrzykladyTSReact/myreactapp/src/lifecycle/MyComponentLife.tsx"],"sourcesContent":["import React, { Component } from \"react\";\r\n\r\n//Demonstracja cyklu życia komponentu\r\n\r\n//UWAGA: Dla zobaczenia wyniku działania console.log trzeba \r\n//użyć Chroma i włączyć w nim \"Narzedzia dla developerów\" (Ctrl+Shift+I)\r\n\r\ninterface Props {\r\n};\r\n\r\ninterface State {\r\n    counter: number;\r\n};\r\n\r\nclass MyComponentLife extends Component<Props, State>\r\n{\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            counter: 0\r\n        }\r\n\r\n        this.increase = this.increase.bind(this);\r\n        \r\n        // etap wygenerowania stanu początkowego komponentu\r\n        \r\n    }\r\n\r\n    increase() {                            \r\n        this.setState((prevState: State) => ({\r\n            counter: prevState.counter + 1\r\n        }));        \r\n    }\r\n\r\n    static getDerivedStateFromProps(props: Props, state: State) {\r\n        \r\n        // Aktualizacja stanu na skutek zmiany props\r\n        \r\n        console.log(\"getDerivedStateFromProps - sprawdzenie props\");\r\n\r\n        return null;\r\n    }\r\n    \r\n    getSnapshotBeforeUpdate(prevProps: Props, prevState: State) {\r\n        \r\n        // Wykorzystywana jest do wykonania operacji przed aktualizacją komponentu\r\n\r\n        console.log(\"getSnapshotBeforeUpdate - PRZED AKTUALIZACJĄ\");\r\n\r\n        return null;        \r\n    }\r\n\r\n  \r\n\r\n    componentDidMount(): void {\r\n        \r\n        // Wywoływana, gdy komponent został utworzony, czyli po pierwszym wywołaniu\r\n        // render(). Służy do wywoływania operacji inicjujących, np. za pomocą HTTP\r\n\r\n        console.log(\"componentDidMount - MONTOWANIE\");\r\n        \r\n        \r\n    }\r\n\r\n    componentDidUpdate(prevProps: Props, prevState: State): void {\r\n        \r\n        // Przykładowe użycie — wykonywanie akcji na podstawie informacji, czy zmienione\r\n        // zostały props (właściwości), np. wysłanie ponownego żądania HTTP, jeśli wykryto,\r\n        // iż komponent otrzymał nową wartość props\r\n        //Wykonywane po aktualizacji komponentu\r\n\r\n        \r\n        console.log(\"componentDidUpdate - PO AKTUALIZACJI\");\r\n        \r\n    }\r\n\r\n    componentWillUnmount(): void {\r\n        \r\n        // Metoda używana w momencie usuwania komponentu lub na początku przy odświeżaniu\r\n\r\n        console.log(\"componentWillUnmount - USUWAM KOMPONENT\");\r\n\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps: Props, nextState: State) {\r\n        \r\n        // Zwraca true lub false, decyduje o tym, czy komponent ma ponownie zostać\r\n        // wyrenderowany (wyświetlony). Dzięki niej możemy np. z powodów wydajnościowych\r\n        // zablokować ponowne renderowane. Uruchamiana jest w momencie uzyskania nowych\r\n        // props lub zmiany stanu\r\n\r\n        //Tutaj dla przykładu, właczamy aktualizację widoku tylko wtedy, gdy wartość licznika przed zmianą jest liczbą nieparzystą\r\n        //Zatem pokazywane są tylko liczby parzyste (po zmianie)\r\n        \r\n        \r\n        if (this.state.counter % 2 == 0) {\r\n            console.log(\"   shouldComponentUpdate - BRAK AKTUALIZACJI\");\r\n            return false;\r\n        }\r\n        else {\r\n\r\n            console.log(\"   shouldComponentUpdate - Zlecenie AKTUALIZACJI\");\r\n            return true;\r\n        }\r\n    }\r\n\r\n    //Wyświetlenie lub aktualizacja widoku komponentu\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>Stan licznika: {this.state.counter}</h3>\r\n                <button onClick={this.increase}>Zwiększ o jeden</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default MyComponentLife;\r\n"],"mappings":"wvBAAA,MAAOA,MAAK,EAAIC,SAAS,KAAQ,OAAO,CAExC;AAEA;AACA;AAAA,wFAGC,CAIA,CAAC,GAEIC,gBAAe,sGAEjB,yBAAYC,KAAY,CAAE,iDACtB,uBAAMA,KAAK,EAEX,MAAKC,KAAK,CAAG,CACTC,OAAO,CAAE,CACb,CAAC,CAED,MAAKC,QAAQ,CAAG,MAAKA,QAAQ,CAACC,IAAI,+BAAM,CAExC;AAAA,aAEJ,CAAC,oDAED,mBAAW,CACP,IAAI,CAACC,QAAQ,CAAC,SAACC,SAAgB,QAAM,CACjCJ,OAAO,CAAEI,SAAS,CAACJ,OAAO,CAAG,CACjC,CAAC,EAAC,CAAC,CACP,CAAC,uCAWD,iCAAwBK,SAAgB,CAAED,SAAgB,CAAE,CAExD;AAEAE,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC,CAE3D,MAAO,KAAI,CACf,CAAC,iCAID,4BAA0B,CAEtB;AACA;AAEAD,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC,CAGjD,CAAC,kCAED,4BAAmBF,SAAgB,CAAED,SAAgB,CAAQ,CAEzD;AACA;AACA;AACA;AAGAE,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC,CAEvD,CAAC,oCAED,+BAA6B,CAEzB;AAEAD,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC,CAE1D,CAAC,qCAED,+BAAsBC,SAAgB,CAAEC,SAAgB,CAAE,CAEtD;AACA;AACA;AACA;AAEA;AACA;AAGA,GAAI,IAAI,CAACV,KAAK,CAACC,OAAO,CAAG,CAAC,EAAI,CAAC,CAAE,CAC7BM,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC,CAC3D,MAAO,MAAK,CAChB,CAAC,IACI,CAEDD,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC,CAC/D,MAAO,KAAI,CACf,CACJ,CAEA;AAAA,sBACA,iBAAS,CACL,mBACI,oCACI,wCAAoB,IAAI,CAACR,KAAK,CAACC,OAAO,GAAM,cAC5C,eAAQ,OAAO,CAAE,IAAI,CAACC,QAAS,kCAAyB,GACtD,CAEd,CAAC,0CAhFD,kCAAgCH,KAAY,CAAEC,KAAY,CAAE,CAExD;AAEAO,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC,CAE3D,MAAO,KAAI,CACf,CAAC,6BA5ByBX,SAAS,EAyGvC,cAAeC,gBAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}
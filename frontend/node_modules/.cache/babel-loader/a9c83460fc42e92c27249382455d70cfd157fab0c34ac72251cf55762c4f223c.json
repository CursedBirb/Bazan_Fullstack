{"ast":null,"code":"var _jsxFileName = \"C:\\\\SKRYPTY\\\\KROSNO\\\\Modern programming techniques\\\\DRUGI_SEMESTR_2023\\\\JavaScript2023\\\\PrzykladyJSReact2023\\\\myreactapp\\\\src\\\\restbank\\\\REST_NOAUTH_BankTransHookForHTML.js\",\n  _s = $RefreshSig$();\n//Klient dostępu do przelewów w banku na serwerze z użyciem usług REST bez autoryzacji (HOOK) bez BOOTSTRAP\n//Lokalizacja bazy: http://localhost:8081/\n//W celu przetestowania klienta należy uruchomić serwer wykonany za pomoca Sprint Boot w języku Java (WEBSERVICE BANK NO AUTH)\n\nimport React, { useState } from \"react\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BankTransNoAuthHookForHTML() {\n  _s();\n  const [status, setStatus] = useState(\"OK\");\n  const [textArea, setTextArea] = useState(\"Brak danych\");\n  const [newClientname, setNewClientname] = useState(\"nowak\");\n  const [newDate, setNewDate] = useState(\"2022-10-30\");\n  const [newDescription, setNewDescription] = useState(\"Zakup USD\");\n  const [newAmount, setNewAmount] = useState(\"345.1\");\n  const [transferIDToDelete, setTransferIDToDelete] = useState(\"1\");\n\n  //Dodanie przelewu na serwer\n  async function addTransfer() {\n    let clientname = newClientname;\n    let date = newDate;\n    let description = newDescription;\n    let amount = newAmount;\n    if (clientname.length > 0 && date.length > 0 && description.length > 0 && amount.length > 0) {\n      await axios.post('http://localhost:8081/addtransfer/', {\n        clientname,\n        date,\n        description,\n        amount\n      } //Podajemy parametry\n      ).then(response => {\n        let text = response.data;\n        setStatus(text);\n      }).catch(err => {\n        let myerror = \"Błąd połaczenia sieciowego.\" + err;\n        setStatus(myerror);\n      });\n    } else {\n      setStatus(\"Żadna z danych wstawianego przelewu nie może być pusta\");\n    }\n  }\n\n  //Pobranie listy przelewow z serwera\n  async function getTransfers() {\n    await axios.post('http://localhost:8081/gettransfers/').then(response => {\n      let transferListText = \"\";\n      response.data.forEach(e => {\n        let lid = e.id;\n        let lclientname = e.clientname;\n        let ldate = e.date;\n        let ldescription = e.description;\n        let lamount = e.amount;\n        let firstPartText = lclientname.substring(0, \"ERROR:\".length);\n        if (firstPartText !== \"ERROR:\") {\n          transferListText = transferListText + lid + \", \" + lclientname + \", \" + ldate + \", \" + ldescription + \", \" + lamount + \"\\n\";\n          setTextArea(transferListText);\n          setStatus(\"OK\");\n        } else {\n          let secondPartText = lclientname.substring(\"ERROR:\".length, lclientname.length);\n          transferListText = lclientname + \"\\n\";\n          setTextArea(transferListText);\n          setStatus(secondPartText);\n        }\n      });\n    }).catch(err => {\n      let myerror = \"Błąd połaczenia sieciowego.\" + err;\n      setStatus(myerror);\n    });\n  }\n  async function deleteTransfer() {\n    let transferidtodelete = transferIDToDelete;\n    if (transferidtodelete.length > 0) {\n      await axios.post('http://localhost:8081/deletetransfer/', {\n        transferidtodelete\n      } //Podajemy parametr\n      ).then(response => {\n        let text = response.data;\n        setStatus(text);\n      }).catch(err => {\n        let myerror = \"Błąd połaczenia sieciowego.\" + err;\n        setStatus(myerror);\n      });\n    } else {\n      setStatus(\"ID przelewu nie może być puste\");\n    }\n  }\n  const handleSubmit = event => {\n    addTransfer();\n    event.preventDefault();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Klient dost\\u0119pu do przelew\\xF3w w banku z u\\u017Cyciem REST (bez autoryzacji, HOOK)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Lokalizacja bazy: http://localhost:8081/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Status: \", status]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 20\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      variant: \"primary\",\n      onClick: getTransfers,\n      children: \"  Odczytaj aktualn\\u0105 list\\u0119 przelew\\xF3w  \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 20\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \" Dane nowego przelewu: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Klient: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this), \"  \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"newClientname\",\n        value: newClientname,\n        onChange: e => setNewClientname(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 43\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Data przelewu: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"newDate\",\n        value: newDate,\n        onChange: e => setNewDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Opis przelewu: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"newDescription\",\n        value: newDescription,\n        onChange: e => setNewDescription(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Kwota: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"newAmount\",\n        value: newAmount,\n        onChange: e => setNewAmount(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 41\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"  Dodaj  \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 20\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"  Podaj id przelewu do usuni\\u0119cia: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"transferIDToDelete\",\n      value: transferIDToDelete,\n      onChange: e => setTransferIDToDelete(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: deleteTransfer,\n      children: \"  Usu\\u0144  \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: textArea,\n      rows: \"5\",\n      cols: \"50\",\n      onChange: e => setTextArea(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 9\n  }, this);\n}\n_s(BankTransNoAuthHookForHTML, \"TnHN9cmlDoXonTzl/mqcG5m2oNo=\");\n_c = BankTransNoAuthHookForHTML;\nvar _c;\n$RefreshReg$(_c, \"BankTransNoAuthHookForHTML\");","map":{"version":3,"names":["React","useState","axios","BankTransNoAuthHookForHTML","status","setStatus","textArea","setTextArea","newClientname","setNewClientname","newDate","setNewDate","newDescription","setNewDescription","newAmount","setNewAmount","transferIDToDelete","setTransferIDToDelete","addTransfer","clientname","date","description","amount","length","post","then","response","text","data","catch","err","myerror","getTransfers","transferListText","forEach","e","lid","id","lclientname","ldate","ldescription","lamount","firstPartText","substring","secondPartText","deleteTransfer","transferidtodelete","handleSubmit","event","preventDefault","target","value"],"sources":["C:/SKRYPTY/KROSNO/Modern programming techniques/DRUGI_SEMESTR_2023/JavaScript2023/PrzykladyJSReact2023/myreactapp/src/restbank/REST_NOAUTH_BankTransHookForHTML.js"],"sourcesContent":["//Klient dostępu do przelewów w banku na serwerze z użyciem usług REST bez autoryzacji (HOOK) bez BOOTSTRAP\r\n//Lokalizacja bazy: http://localhost:8081/\r\n//W celu przetestowania klienta należy uruchomić serwer wykonany za pomoca Sprint Boot w języku Java (WEBSERVICE BANK NO AUTH)\r\n\r\n\r\nimport React, { useState } from \"react\";\r\nimport axios from 'axios';\r\n\r\n\r\nexport default function BankTransNoAuthHookForHTML() {\r\n\r\n\r\n    const [status, setStatus] = useState(\"OK\");\r\n    const [textArea, setTextArea] = useState(\"Brak danych\");\r\n    const [newClientname, setNewClientname] = useState(\"nowak\");\r\n    const [newDate, setNewDate] = useState(\"2022-10-30\");\r\n    const [newDescription, setNewDescription] = useState(\"Zakup USD\");\r\n    const [newAmount, setNewAmount] = useState(\"345.1\");\r\n    const [transferIDToDelete, setTransferIDToDelete] = useState(\"1\");\r\n\r\n\r\n    //Dodanie przelewu na serwer\r\n    async function addTransfer() {\r\n\r\n        let clientname = newClientname;\r\n        let date = newDate;\r\n        let description = newDescription;\r\n        let amount = newAmount;\r\n\r\n\r\n        if ((clientname.length > 0) && (date.length > 0) && (description.length > 0) && (amount.length > 0)) {\r\n            await axios.post('http://localhost:8081/addtransfer/',\r\n                { clientname, date, description, amount }, //Podajemy parametry\r\n            )\r\n                .then(response => {\r\n                    let text = response.data;\r\n                    setStatus(text);\r\n                }).catch(err => {\r\n                    let myerror = \"Błąd połaczenia sieciowego.\" + err;\r\n                    setStatus(myerror);                    \r\n                });\r\n        }\r\n        else {\r\n            setStatus(\"Żadna z danych wstawianego przelewu nie może być pusta\");            \r\n        }\r\n    }\r\n\r\n\r\n    //Pobranie listy przelewow z serwera\r\n    async function getTransfers() {\r\n\r\n        await axios.post('http://localhost:8081/gettransfers/')\r\n            .then(response => {\r\n\r\n                let transferListText = \"\"\r\n\r\n                response.data.forEach((e) => {\r\n                    let lid = e.id;\r\n                    let lclientname = e.clientname; let ldate = e.date; let ldescription = e.description; let lamount = e.amount;\r\n\r\n                    let firstPartText = lclientname.substring(0, (\"ERROR:\").length);\r\n\r\n\r\n                    if (firstPartText !== \"ERROR:\") {\r\n                        transferListText = transferListText + lid + \", \" + lclientname + \", \" + ldate + \", \" + ldescription + \", \" + lamount + \"\\n\";\r\n                        setTextArea(transferListText);\r\n                        setStatus(\"OK\");                        \r\n                    }\r\n                    else {\r\n                        let secondPartText = lclientname.substring((\"ERROR:\").length, lclientname.length);\r\n                        transferListText = lclientname + \"\\n\";\r\n                        setTextArea(transferListText);\r\n                        setStatus(secondPartText);                                                \r\n                    }\r\n                })\r\n\r\n            }).catch(err => {\r\n\r\n                let myerror = \"Błąd połaczenia sieciowego.\" + err;\r\n                setStatus(myerror);                                                                \r\n            });\r\n\r\n    }\r\n\r\n\r\n    async function deleteTransfer() {\r\n\r\n        let transferidtodelete = transferIDToDelete;\r\n\r\n        if (transferidtodelete.length > 0) {\r\n\r\n            await axios.post('http://localhost:8081/deletetransfer/',\r\n                { transferidtodelete }, //Podajemy parametr\r\n            )\r\n                .then(response => {\r\n                    let text = response.data;\r\n                    setStatus(text);                                            \r\n                }).catch(err => {\r\n                    let myerror = \"Błąd połaczenia sieciowego.\" + err;\r\n                    setStatus(myerror);                                                                \r\n                });\r\n        }\r\n        else {\r\n            setStatus(\"ID przelewu nie może być puste\");                                                                            \r\n        }\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        addTransfer();\r\n        event.preventDefault();\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n\r\n            <h2>Klient dostępu do przelewów w banku z użyciem REST (bez autoryzacji, HOOK)</h2>\r\n            <h3>Lokalizacja bazy: http://localhost:8081/</h3>\r\n\r\n            <p></p>\r\n\r\n            <h3>Status: {status}</h3>\r\n\r\n            <p></p><p></p>\r\n\r\n            <button variant=\"primary\" onClick={getTransfers}>  Odczytaj aktualną listę przelewów  </button>\r\n\r\n            <p></p><p></p>\r\n\r\n            <label> Dane nowego przelewu: </label>\r\n\r\n\r\n            <form onSubmit={handleSubmit}>\r\n                <label> Klient: </label>  <input type=\"text\" name='newClientname' value={newClientname} onChange={(e) => setNewClientname(e.target.value)} />\r\n                <label> Data przelewu: </label> <input type=\"text\" name='newDate' value={newDate} onChange={(e) => setNewDate(e.target.value)} />\r\n                <label> Opis przelewu: </label> <input type=\"text\" name='newDescription' value={newDescription} onChange={(e) => setNewDescription(e.target.value)} />\r\n                <label> Kwota: </label> <input type=\"text\" name='newAmount' value={newAmount} onChange={(e) => setNewAmount(e.target.value)} />\r\n                <button type=\"submit\">  Dodaj  </button>\r\n            </form>\r\n\r\n            <p></p><p></p>\r\n\r\n            <label>  Podaj id przelewu do usunięcia: </label>\r\n            <input type=\"text\" name='transferIDToDelete' value={transferIDToDelete} onChange={(e) => setTransferIDToDelete(e.target.value)} />\r\n\r\n            <button onClick={deleteTransfer}>  Usuń  </button>\r\n\r\n            <p></p>\r\n\r\n\r\n            <textarea value={textArea} rows=\"5\" cols=\"50\" onChange={(e) => setTextArea(e.target.value)} />\r\n\r\n            <p></p>\r\n\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
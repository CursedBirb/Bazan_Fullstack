{"ast":null,"code":"var _jsxFileName = \"C:\\\\Bazan_Fullstack-main\\\\frontend\\\\src\\\\components\\\\GetLastestScore.js\",\n  _s = $RefreshSig$();\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GetLatestScore() {\n  _s();\n  const backendUrl = 'http://localhost:8081';\n  const [status, setStatus] = useState(\"OK\");\n  const [textArea, setTextArea] = useState(\"Tu powinna być zawartość bazy danych, ale jak nie to mi wciąż nie działa\");\n  const [wynik, setWynik] = useState(\"\");\n  const [, forceUpdate] = useState();\n  const [score, setScore] = useState();\n  var username = localStorage.getItem('userName');\n  var password = localStorage.getItem('password');\n  async function getScore() {\n    // await axios.post(`${backendUrl}/api/v1/getlatestscore/`\n    // await axios.post(`${backendUrl}/api/v1/getlatestscore/`,\n    await axios.post(`${backendUrl}/api/getscore`, {\n      username,\n      password\n    }).then(response => {\n      // console.log(response.data);\n\n      let rd = response.data;\n      let scoresListText = \"\";\n      scoresListText = `${response.data.username}, ${response.data.hiraganaScore1}, ${response.data.hiraganaScore2}, ${response.data.hiraganaScore3}, ${response.data.katakanaScore1}, ${response.data.katakanaScore2}, ${response.data.katakanaScore3}\\n`;\n      if (rd.hiraganaScore1 === -32) {\n        setScore(\"Finish test at least once to see your % score of the last three tries\");\n      }\n      if (rd.hiraganaScore1 > -32) {\n        setScore(\"Your score is: \" + rd.hiraganaScore1 / 46 * 100 + \"%.\");\n      }\n      if (rd.hiraganaScore2 > -32) {\n        setScore(\"Your score is: \" + (rd.hiraganaScore1 + rd.hiraganaScore2) / 2 / 46 * 100 + \"%.\");\n      }\n      if (rd.hiraganaScore3 > -32) {\n        setScore(\"Your score is: \" + (rd.hiraganaScore1 + rd.hiraganaScore2 + rd.hiraganaScore3) / 3 / 46 * 100 + \"%.\");\n      }\n\n      // setTextArea(scoresListText);\n      // setStatus(\"OK\");\n      // setWynik(scoresListText);\n      // console.log(wynik);\n    }).catch(err => {\n      let myerror = \"Błąd połaczenia sieciowego.\" + err;\n      setStatus(myerror);\n    });\n  }\n  useEffect(() => {\n    // Tu możesz dodać inne efekty uboczne, jeśli są potrzebne\n  }, [wynik]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getScore,\n      children: \"Get your all scores\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this)\n\n  // <Container>\n\n  //     <Button variant=\"primary\" onClick={getScore}>  Odczytaj aktualną listę przelewów  </Button>\n\n  //     <p></p>\n\n  //     <Form.Control as=\"textarea\" rows={8} type=\"text\" value={textArea} placeholder=\"\" onChange={(e) => setTextArea(e.target.value)} spellCheck=\"false\" />\n\n  //     <p></p>\n\n  // </Container>\n  ;\n}\n_s(GetLatestScore, \"y+QEuFj71SmHqGbG0YD9sH8KGnE=\");\n_c = GetLatestScore;\nvar _c;\n$RefreshReg$(_c, \"GetLatestScore\");","map":{"version":3,"names":["axios","React","useEffect","useState","GetLatestScore","backendUrl","status","setStatus","textArea","setTextArea","wynik","setWynik","forceUpdate","score","setScore","username","localStorage","getItem","password","getScore","post","then","response","rd","data","scoresListText","hiraganaScore1","hiraganaScore2","hiraganaScore3","katakanaScore1","katakanaScore2","katakanaScore3","catch","err","myerror"],"sources":["C:/Bazan_Fullstack-main/frontend/src/components/GetLastestScore.js"],"sourcesContent":["import axios from 'axios';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nexport default function GetLatestScore() {\r\n\r\n    const backendUrl = 'http://localhost:8081';\r\n    const [status, setStatus] = useState(\"OK\");\r\n    const [textArea, setTextArea] = useState(\"Tu powinna być zawartość bazy danych, ale jak nie to mi wciąż nie działa\");\r\n    const [wynik, setWynik] = useState(\"\");\r\n    const [, forceUpdate] = useState();\r\n    const [score, setScore] = useState();\r\n\r\n    var username = localStorage.getItem('userName');\r\n    var password = localStorage.getItem('password');\r\n\r\n    async function getScore() {\r\n\r\n        // await axios.post(`${backendUrl}/api/v1/getlatestscore/`\r\n        // await axios.post(`${backendUrl}/api/v1/getlatestscore/`,\r\n        await axios.post(`${backendUrl}/api/getscore`,\r\n        { username, password } )\r\n            .then(response => {\r\n                // console.log(response.data);\r\n\r\n                let rd = response.data;\r\n\r\n                let scoresListText = \"\";\r\n\r\n                scoresListText = `${response.data.username}, ${response.data.hiraganaScore1}, ${response.data.hiraganaScore2}, ${response.data.hiraganaScore3}, ${response.data.katakanaScore1}, ${response.data.katakanaScore2}, ${response.data.katakanaScore3}\\n`;\r\n\r\n                if(rd.hiraganaScore1 === -32) {\r\n\r\n                    setScore(\"Finish test at least once to see your % score of the last three tries\");\r\n\r\n                }\r\n\r\n                if(rd.hiraganaScore1 > -32) {\r\n\r\n                    setScore(\"Your score is: \" + (((rd.hiraganaScore1) / 46) * 100) + \"%.\");\r\n\r\n                }\r\n\r\n                if(rd.hiraganaScore2 > -32) {\r\n\r\n                    setScore(\"Your score is: \" + ((((rd.hiraganaScore1 + rd.hiraganaScore2) / 2) / 46) * 100) + \"%.\");\r\n\r\n                }\r\n\r\n                if(rd.hiraganaScore3 > -32) {\r\n\r\n                    setScore(\"Your score is: \" + ((((rd.hiraganaScore1 + rd.hiraganaScore2 + rd.hiraganaScore3) / 3) / 46) * 100) + \"%.\");\r\n\r\n                }\r\n                \r\n                // setTextArea(scoresListText);\r\n                // setStatus(\"OK\");\r\n                // setWynik(scoresListText);\r\n                // console.log(wynik);\r\n\r\n                \r\n\r\n            }).catch(err => {\r\n\r\n                let myerror = \"Błąd połaczenia sieciowego.\" + err;\r\n                setStatus(myerror);\r\n            });\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        // Tu możesz dodać inne efekty uboczne, jeśli są potrzebne\r\n    }, [wynik]);\r\n\r\n    return (\r\n\r\n        <div >\r\n\r\n            <button onClick={getScore}>Get your all scores</button>\r\n            <p>{score}</p>\r\n            <p></p>\r\n\r\n            \r\n\r\n        </div>\r\n\r\n        // <Container>\r\n\r\n        //     <Button variant=\"primary\" onClick={getScore}>  Odczytaj aktualną listę przelewów  </Button>\r\n\r\n        //     <p></p>\r\n\r\n        //     <Form.Control as=\"textarea\" rows={8} type=\"text\" value={textArea} placeholder=\"\" onChange={(e) => setTextArea(e.target.value)} spellCheck=\"false\" />\r\n\r\n        //     <p></p>\r\n\r\n        // </Container>\r\n\r\n    );\r\n\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,sCAAsC;AAC7C,OAAOC,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC;AAEnD,eAAe,SAASC,cAAc,GAAG;EAAA;EAErC,MAAMC,UAAU,GAAG,uBAAuB;EAC1C,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGJ,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACK,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,0EAA0E,CAAC;EACpH,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,GAAGS,WAAW,CAAC,GAAGT,QAAQ,EAAE;EAClC,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,EAAE;EAEpC,IAAIY,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EAC/C,IAAIC,QAAQ,GAAGF,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EAE/C,eAAeE,QAAQ,GAAG;IAEtB;IACA;IACA,MAAMnB,KAAK,CAACoB,IAAI,CAAE,GAAEf,UAAW,eAAc,EAC7C;MAAEU,QAAQ;MAAEG;IAAS,CAAC,CAAE,CACnBG,IAAI,CAACC,QAAQ,IAAI;MACd;;MAEA,IAAIC,EAAE,GAAGD,QAAQ,CAACE,IAAI;MAEtB,IAAIC,cAAc,GAAG,EAAE;MAEvBA,cAAc,GAAI,GAAEH,QAAQ,CAACE,IAAI,CAACT,QAAS,KAAIO,QAAQ,CAACE,IAAI,CAACE,cAAe,KAAIJ,QAAQ,CAACE,IAAI,CAACG,cAAe,KAAIL,QAAQ,CAACE,IAAI,CAACI,cAAe,KAAIN,QAAQ,CAACE,IAAI,CAACK,cAAe,KAAIP,QAAQ,CAACE,IAAI,CAACM,cAAe,KAAIR,QAAQ,CAACE,IAAI,CAACO,cAAe,IAAG;MAEpP,IAAGR,EAAE,CAACG,cAAc,KAAK,CAAC,EAAE,EAAE;QAE1BZ,QAAQ,CAAC,uEAAuE,CAAC;MAErF;MAEA,IAAGS,EAAE,CAACG,cAAc,GAAG,CAAC,EAAE,EAAE;QAExBZ,QAAQ,CAAC,iBAAiB,GAAMS,EAAE,CAACG,cAAc,GAAI,EAAE,GAAI,GAAI,GAAG,IAAI,CAAC;MAE3E;MAEA,IAAGH,EAAE,CAACI,cAAc,GAAG,CAAC,EAAE,EAAE;QAExBb,QAAQ,CAAC,iBAAiB,GAAM,CAACS,EAAE,CAACG,cAAc,GAAGH,EAAE,CAACI,cAAc,IAAI,CAAC,GAAI,EAAE,GAAI,GAAI,GAAG,IAAI,CAAC;MAErG;MAEA,IAAGJ,EAAE,CAACK,cAAc,GAAG,CAAC,EAAE,EAAE;QAExBd,QAAQ,CAAC,iBAAiB,GAAM,CAACS,EAAE,CAACG,cAAc,GAAGH,EAAE,CAACI,cAAc,GAAGJ,EAAE,CAACK,cAAc,IAAI,CAAC,GAAI,EAAE,GAAI,GAAI,GAAG,IAAI,CAAC;MAEzH;;MAEA;MACA;MACA;MACA;IAIJ,CAAC,CAAC,CAACI,KAAK,CAACC,GAAG,IAAI;MAEZ,IAAIC,OAAO,GAAG,6BAA6B,GAAGD,GAAG;MACjD1B,SAAS,CAAC2B,OAAO,CAAC;IACtB,CAAC,CAAC;EAEV;EAEAhC,SAAS,CAAC,MAAM;IACZ;EAAA,CACH,EAAE,CAACQ,KAAK,CAAC,CAAC;EAEX,oBAEI;IAAA,wBAEI;MAAQ,OAAO,EAAES,QAAS;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAA6B,eACvD;MAAA,UAAIN;IAAK;MAAA;MAAA;MAAA;IAAA,QAAK,eACd;MAAA;MAAA;MAAA;IAAA,QAAO;EAAA;IAAA;IAAA;IAAA;EAAA;;EAMX;;EAEA;;EAEA;;EAEA;;EAEA;;EAEA;EAAA;AAIR;AAAC,GAhGuBT,cAAc;AAAA,KAAdA,cAAc;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
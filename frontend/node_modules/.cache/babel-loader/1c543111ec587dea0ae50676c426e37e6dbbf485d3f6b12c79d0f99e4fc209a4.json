{"ast":null,"code":"var _jsxFileName = \"C:\\\\SKRYPTY\\\\KROSNO\\\\Modern programming techniques\\\\DRUGI_SEMESTR_2023\\\\JavaScript2023\\\\PrzykladyJSReact2023\\\\myreactapp\\\\src\\\\restbank\\\\REST_BASICAUTH_BankTransHookForHTML.js\",\n  _s = $RefreshSig$();\n//Klient dostępu do przelewów w banku na serwerze z użyciem usług REST z autoryzacja w opaciu o nazwę uzytkownika i hasło (HOOK)\n//Lokalizacja bazy: http://localhost:8081/\n//W celu przetestowania klienta należy uruchomić serwer wykonany za pomoca Sprint Boot w języku Java (WEBSERVICE BANK NO AUTH)\n\nimport React, { useState } from \"react\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BankTransBasicAuthHookForHTML() {\n  _s();\n  const [status, setStatus] = useState(\"OK\");\n  const [textArea, setTextArea] = useState(\"Brak danych\");\n  const [newClientname, setNewClientname] = useState(\"nowak\");\n  const [newDate, setNewDate] = useState(\"2022-10-30\");\n  const [newDescription, setNewDescription] = useState(\"Zakup USD\");\n  const [newAmount, setNewAmount] = useState(\"345.1\");\n  const [transferIDToDelete, setTransferIDToDelete] = useState(\"1\");\n  const [userName, setUserName] = useState(\"bazan@gmail.com\");\n  const [password, setPassword] = useState(\"rzeszow\");\n\n  //ROLA: ADMIN\n  //userName: \"admin@gmail.com\", password: \"polska\"         \n\n  //ROLA: CLIENT\n  //userName: \"nowak@gmail.com\", password: \"nowaczek\"         \n\n  //ROLA: ADMIN i CLIENT\n  //userName: \"bazan@gmail.com\", password: \"rzeszow\"         \n\n  //Dodanie przelewu na serwer\n  async function addTransfer() {\n    let clientname = newClientname;\n    let date = newDate;\n    let description = newDescription;\n    let amount = newAmount;\n    if (clientname.length > 0 && date.length > 0 && description.length > 0 && amount.length > 0) {\n      let token = userName + \":\" + password;\n      var etoken = window.btoa(token);\n      var basicAuth = 'Basic ' + etoken;\n      await axios.post('http://localhost:8081/padmin/addtransfer/', {\n        clientname,\n        date,\n        description,\n        amount\n      }, {\n        headers: {\n          authorization: basicAuth\n        }\n      } //Podajemy parametry\n      ).then(response => {\n        let text = response.data;\n        setStatus(text);\n      }).catch(err => {\n        let myerror = \"Błąd połączenia sieciowego.\" + err;\n        setStatus(myerror);\n      });\n    } else {\n      setStatus(\"Żadna z danych wstawianego przelewu nie może być pusta\");\n    }\n  }\n\n  //Pobranie listy przelewow z serwera\n  async function getTransfers() {\n    let token = userName + \":\" + password;\n    var etoken = window.btoa(token);\n    var basicAuth = 'Basic ' + etoken;\n    await axios.post('http://localhost:8081/pclient/gettransfers/', {}, {\n      headers: {\n        authorization: basicAuth\n      }\n    }).then(response => {\n      let transferListText = \"\";\n      response.data.forEach(e => {\n        let lid = e.id;\n        let lclientname = e.clientname;\n        let ldate = e.date;\n        let ldescription = e.description;\n        let lamount = e.amount;\n        let firstPartText = lclientname.substring(0, \"ERROR:\".length);\n        if (firstPartText !== \"ERROR:\") {\n          transferListText = transferListText + lid + \", \" + lclientname + \", \" + ldate + \", \" + ldescription + \", \" + lamount + \"\\n\";\n          setTextArea(transferListText);\n          setStatus(\"OK\");\n        } else {\n          let secondPartText = lclientname.substring(\"ERROR:\".length, lclientname.length);\n          transferListText = lclientname + \"\\n\";\n          setTextArea(transferListText);\n          setStatus(secondPartText);\n        }\n      });\n    }).catch(err => {\n      let myerror = \"Błąd połaczenia sieciowego.\" + err;\n      setStatus(myerror);\n    });\n  }\n  async function deleteTransfer() {\n    let transferidtodelete = transferIDToDelete;\n    if (transferidtodelete.length > 0) {\n      let token = userName + \":\" + password;\n      var etoken = window.btoa(token);\n      var basicAuth = 'Basic ' + etoken;\n      await axios.post('http://localhost:8081/padmin/deletetransfer/', {\n        transferidtodelete\n      }, {\n        headers: {\n          authorization: basicAuth\n        }\n      } //Podajemy parametr\n      ).then(response => {\n        let text = response.data;\n        setStatus(text);\n      }).catch(err => {\n        let myerror = \"Błąd połaczenia sieciowego.\" + err;\n        setStatus(myerror);\n      });\n    } else {\n      setStatus(\"ID przelewu nie może być puste\");\n    }\n  }\n  function handleSubmit(event) {\n    addTransfer();\n    event.preventDefault(); //Dla zapobiegniecia ponownemu załadowaniu/odświeżeniu przeglądarki\n  }\n\n  //--------------------------------------------\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Klient dost\\u0119pu do przelew\\xF3w w banku z u\\u017Cyciem REST (z autoryzacj\\u0105, HOOK)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Lokalizacja bazy: http://localhost:8081/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Status: \", status]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Aktualny u\\u017Cytkownik i has\\u0142o: \", userName, \", \", password]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 20\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      variant: \"primary\",\n      onClick: getTransfers,\n      children: \"  Odczytaj aktualn\\u0105 list\\u0119 przelew\\xF3w  \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: textArea,\n      rows: \"5\",\n      cols: \"50\",\n      onChange: e => setTextArea(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 20\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \" Dane nowego przelewu: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Klient: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this), \"  \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"newClientname\",\n        value: newClientname,\n        onChange: e => setNewClientname(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 43\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Data przelewu: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"newDate\",\n        value: newDate,\n        onChange: e => setNewDate(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Opis przelewu: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"newDescription\",\n        value: newDescription,\n        onChange: e => setNewDescription(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 49\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \" Kwota: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"newAmount\",\n        value: newAmount,\n        onChange: e => setNewAmount(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 41\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"  Dodaj  \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 20\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 20\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: \"  Podaj id przelewu do usuni\\u0119cia: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"transferIDToDelete\",\n      value: transferIDToDelete,\n      onChange: e => setTransferIDToDelete(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: deleteTransfer,\n      children: \"  Usu\\u0144  \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 9\n  }, this);\n}\n_s(BankTransBasicAuthHookForHTML, \"H95N0QGwgUgUYPWfp5c68KjuGGw=\");\n_c = BankTransBasicAuthHookForHTML;\nvar _c;\n$RefreshReg$(_c, \"BankTransBasicAuthHookForHTML\");","map":{"version":3,"names":["React","useState","axios","BankTransBasicAuthHookForHTML","status","setStatus","textArea","setTextArea","newClientname","setNewClientname","newDate","setNewDate","newDescription","setNewDescription","newAmount","setNewAmount","transferIDToDelete","setTransferIDToDelete","userName","setUserName","password","setPassword","addTransfer","clientname","date","description","amount","length","token","etoken","window","btoa","basicAuth","post","headers","authorization","then","response","text","data","catch","err","myerror","getTransfers","transferListText","forEach","e","lid","id","lclientname","ldate","ldescription","lamount","firstPartText","substring","secondPartText","deleteTransfer","transferidtodelete","handleSubmit","event","preventDefault","target","value"],"sources":["C:/SKRYPTY/KROSNO/Modern programming techniques/DRUGI_SEMESTR_2023/JavaScript2023/PrzykladyJSReact2023/myreactapp/src/restbank/REST_BASICAUTH_BankTransHookForHTML.js"],"sourcesContent":["//Klient dostępu do przelewów w banku na serwerze z użyciem usług REST z autoryzacja w opaciu o nazwę uzytkownika i hasło (HOOK)\r\n//Lokalizacja bazy: http://localhost:8081/\r\n//W celu przetestowania klienta należy uruchomić serwer wykonany za pomoca Sprint Boot w języku Java (WEBSERVICE BANK NO AUTH)\r\n\r\n\r\nimport React, { useState } from \"react\";\r\nimport axios from 'axios';\r\n\r\n\r\n\r\nexport default function BankTransBasicAuthHookForHTML() {\r\n\r\n\r\n    const [status, setStatus] = useState(\"OK\");\r\n    const [textArea, setTextArea] = useState(\"Brak danych\");\r\n    const [newClientname, setNewClientname] = useState(\"nowak\");\r\n    const [newDate, setNewDate] = useState(\"2022-10-30\");\r\n    const [newDescription, setNewDescription] = useState(\"Zakup USD\");\r\n    const [newAmount, setNewAmount] = useState(\"345.1\");\r\n    const [transferIDToDelete, setTransferIDToDelete] = useState(\"1\");\r\n    const [userName, setUserName] = useState(\"bazan@gmail.com\");\r\n    const [password, setPassword] = useState(\"rzeszow\");\r\n\r\n\r\n    //ROLA: ADMIN\r\n    //userName: \"admin@gmail.com\", password: \"polska\"         \r\n\r\n    //ROLA: CLIENT\r\n    //userName: \"nowak@gmail.com\", password: \"nowaczek\"         \r\n\r\n    //ROLA: ADMIN i CLIENT\r\n    //userName: \"bazan@gmail.com\", password: \"rzeszow\"         \r\n\r\n\r\n    //Dodanie przelewu na serwer\r\n    async function addTransfer() {\r\n\r\n        let clientname = newClientname;\r\n        let date = newDate;\r\n        let description = newDescription;\r\n        let amount = newAmount;\r\n\r\n\r\n        if ((clientname.length > 0) && (date.length > 0) && (description.length > 0) && (amount.length > 0)) {\r\n\r\n\r\n            let token = userName + \":\" + password;\r\n            var etoken = window.btoa(token);\r\n            var basicAuth = 'Basic ' + etoken;\r\n\r\n            await axios.post('http://localhost:8081/padmin/addtransfer/',\r\n                { clientname, date, description, amount }, { headers: { authorization: basicAuth } } //Podajemy parametry\r\n            )\r\n                .then(response => {\r\n                    let text = response.data;\r\n                    setStatus(text);\r\n                }).catch(err => {\r\n                    let myerror = \"Błąd połączenia sieciowego.\" + err;\r\n                    setStatus(myerror);\r\n                });\r\n        }\r\n        else {\r\n            setStatus(\"Żadna z danych wstawianego przelewu nie może być pusta\");\r\n        }\r\n    }\r\n\r\n\r\n    //Pobranie listy przelewow z serwera\r\n    async function getTransfers() {\r\n\r\n        let token = userName + \":\" + password;\r\n        var etoken = window.btoa(token);\r\n        var basicAuth = 'Basic ' + etoken;\r\n\r\n\r\n        await axios.post('http://localhost:8081/pclient/gettransfers/', {}, { headers: { authorization: basicAuth } })\r\n            .then(response => {\r\n\r\n                let transferListText = \"\"\r\n\r\n                response.data.forEach((e) => {\r\n                    let lid = e.id;\r\n                    let lclientname = e.clientname; let ldate = e.date; let ldescription = e.description; let lamount = e.amount;\r\n\r\n                    let firstPartText = lclientname.substring(0, (\"ERROR:\").length);\r\n\r\n\r\n                    if (firstPartText !== \"ERROR:\") {\r\n                        transferListText = transferListText + lid + \", \" + lclientname + \", \" + ldate + \", \" + ldescription + \", \" + lamount + \"\\n\";\r\n                        setTextArea(transferListText);\r\n                        setStatus(\"OK\");\r\n                    }\r\n                    else {\r\n                        let secondPartText = lclientname.substring((\"ERROR:\").length, lclientname.length);\r\n                        transferListText = lclientname + \"\\n\";\r\n                        setTextArea(transferListText);\r\n                        setStatus(secondPartText);\r\n                    }\r\n                })\r\n\r\n            }).catch(err => {\r\n\r\n                let myerror = \"Błąd połaczenia sieciowego.\" + err;\r\n                setStatus(myerror);\r\n            });\r\n\r\n    }\r\n\r\n\r\n    async function deleteTransfer() {\r\n\r\n        let transferidtodelete = transferIDToDelete;\r\n\r\n        if (transferidtodelete.length > 0) {\r\n\r\n            let token = userName + \":\" + password;\r\n            var etoken = window.btoa(token);\r\n            var basicAuth = 'Basic ' + etoken;\r\n\r\n            await axios.post('http://localhost:8081/padmin/deletetransfer/',\r\n                { transferidtodelete }, { headers: { authorization: basicAuth } } //Podajemy parametr\r\n            )\r\n                .then(response => {\r\n                    let text = response.data;\r\n                    setStatus(text);\r\n                }).catch(err => {\r\n                    let myerror = \"Błąd połaczenia sieciowego.\" + err;\r\n                    setStatus(myerror);\r\n                });\r\n        }\r\n        else {\r\n            setStatus(\"ID przelewu nie może być puste\");\r\n        }\r\n    }\r\n\r\n\r\n    function handleSubmit(event) {\r\n\r\n        addTransfer();\r\n        event.preventDefault(); //Dla zapobiegniecia ponownemu załadowaniu/odświeżeniu przeglądarki\r\n    }\r\n\r\n\r\n    //--------------------------------------------\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n\r\n            <h2>Klient dostępu do przelewów w banku z użyciem REST (z autoryzacją, HOOK)</h2>\r\n            <h3>Lokalizacja bazy: http://localhost:8081/</h3>\r\n\r\n           \r\n            <p></p>\r\n\r\n            <h3>Status: {status}</h3>\r\n            <p>Aktualny użytkownik i hasło: {userName}, {password}</p>\r\n\r\n            <p></p>\r\n\r\n            <p></p><p></p>\r\n\r\n            <button variant=\"primary\" onClick={getTransfers}>  Odczytaj aktualną listę przelewów  </button>\r\n            \r\n            <p></p>\r\n\r\n            <textarea value={textArea} rows=\"5\" cols=\"50\" onChange={(e) => setTextArea(e.target.value)} />\r\n\r\n            <p></p><p></p>\r\n\r\n            <label> Dane nowego przelewu: </label>\r\n\r\n            <form onSubmit={handleSubmit}>\r\n                <label> Klient: </label>  <input type=\"text\" name='newClientname' value={newClientname} onChange={(e) => setNewClientname(e.target.value)} />\r\n                <label> Data przelewu: </label> <input type=\"text\" name='newDate' value={newDate} onChange={(e) => setNewDate(e.target.value)} />\r\n                <label> Opis przelewu: </label> <input type=\"text\" name='newDescription' value={newDescription} onChange={(e) => setNewDescription(e.target.value)} />\r\n                <label> Kwota: </label> <input type=\"text\" name='newAmount' value={newAmount} onChange={(e) => setNewAmount(e.target.value)} />\r\n                <button type=\"submit\">  Dodaj  </button>\r\n            </form>\r\n\r\n            <p></p><p></p>\r\n            \r\n            <p></p><p></p>\r\n\r\n            <label>  Podaj id przelewu do usunięcia: </label>\r\n            <input type=\"text\" name='transferIDToDelete' value={transferIDToDelete} onChange={(e) => setTransferIDToDelete(e.target.value)} />\r\n\r\n            <button onClick={deleteTransfer}>  Usuń  </button>\r\n\r\n            <p></p>\r\n\r\n            <p></p>\r\n\r\n\r\n            \r\n\r\n        </div>\r\n\r\n    );\r\n\r\n\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
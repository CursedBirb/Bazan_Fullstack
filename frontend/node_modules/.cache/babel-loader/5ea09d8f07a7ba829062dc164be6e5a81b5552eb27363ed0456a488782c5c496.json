{"ast":null,"code":"var _jsxFileName = \"C:\\\\BazanFullStack\\\\frontend\\\\src\\\\components\\\\GetHiraganaRomajiAndImage.js\",\n  _s = $RefreshSig$();\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GetHiraganaRomajiAndImage() {\n  _s();\n  const backendUrl = 'http://localhost:8081';\n  const [targetNumberOfLetter, setTargetNumberOfLetter] = useState(1);\n  const [status, setStatus] = useState(\"OK\");\n  const [image, setImage] = useState(\"Brak Zdjęcia\");\n  const [romaji, setRomaji] = useState(\"Brak Litery\");\n  async function getRecordById() {\n    try {\n      const response = await axios.post(`${backendUrl}/api/v1/gethiraganarecord/`);\n      console.log(response.data); // Sprawdź, co zwraca serwer\n\n      if (Array.isArray(response.data) && response.data.length > 0) {\n        let idFound = false;\n        for (let i = 0; i < response.data.length; i++) {\n          let e = response.data[i];\n\n          // Dodaj warunek sprawdzający, czy 'id' jest większe lub równe zeru\n          if (e && typeof e.id !== 'undefined' && e.id >= 0) {\n            let lid = e.id;\n            let lhiraganaRomaji = e.hiraganaRomaji;\n            let lhiraganaImage = e.hiraganaImage;\n            let firstPartText = lhiraganaRomaji.substring(0, \"ERROR:\".length);\n            if (firstPartText !== \"ERROR:\" && parseInt(lid, 10) === targetNumberOfLetter) {\n              setStatus(\"OK\");\n              setRomaji(`${lhiraganaRomaji}`);\n              setImage(`${lhiraganaImage}`);\n              idFound = true;\n              break;\n            } else if (firstPartText === \"ERROR:\" && parseInt(lid, 10) === targetNumberOfLetter) {\n              let secondPartText = lhiraganaRomaji.substring(\"ERROR:\".length, lhiraganaRomaji.length);\n              setStatus(secondPartText);\n              idFound = true;\n              break;\n            }\n          } else {\n            // Kontynuuj iterację, gdy 'id' jest mniejsze niż zero\n            continue;\n          }\n        }\n        if (!idFound) {\n          setStatus(\"Id nie znaleziono\");\n        }\n      } else {\n        setStatus(\"Pusta lub niepoprawna odpowiedź serwera\");\n      }\n    } catch (err) {\n      let myerror = \"Błąd połączenia sieciowego.\" + err;\n      setStatus(myerror);\n    }\n  }\n\n  // Wywołanie funkcji z konkretnym username (np. 'john_doe')\n\n  const incrementTarget = () => {\n    setTargetNumberOfLetter(targetNumberOfLetter + 1);\n    getRecordById();\n  };\n  useEffect(() => {\n    getRecordById();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: incrementTarget,\n      children: \"Pobierz Wynik\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: targetNumberOfLetter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: romaji\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: image\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n}\n_s(GetHiraganaRomajiAndImage, \"X5ep3lVWQ1f8ELUBxcWjsmtWNS0=\");\n_c = GetHiraganaRomajiAndImage;\nvar _c;\n$RefreshReg$(_c, \"GetHiraganaRomajiAndImage\");","map":{"version":3,"names":["axios","React","useEffect","useState","GetHiraganaRomajiAndImage","backendUrl","targetNumberOfLetter","setTargetNumberOfLetter","status","setStatus","image","setImage","romaji","setRomaji","getRecordById","response","post","console","log","data","Array","isArray","length","idFound","i","e","id","lid","lhiraganaRomaji","hiraganaRomaji","lhiraganaImage","hiraganaImage","firstPartText","substring","parseInt","secondPartText","err","myerror","incrementTarget"],"sources":["C:/BazanFullStack/frontend/src/components/GetHiraganaRomajiAndImage.js"],"sourcesContent":["import axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useEffect, useState } from \"react\";\n\nexport default function GetHiraganaRomajiAndImage() {\n\n    const backendUrl = 'http://localhost:8081';\n    const [targetNumberOfLetter, setTargetNumberOfLetter] = useState(1);\n    const [status, setStatus] = useState(\"OK\");\n    const [image, setImage] = useState(\"Brak Zdjęcia\");\n    const [romaji, setRomaji] = useState(\"Brak Litery\");\n\n    async function getRecordById() {\n        try {\n          const response = await axios.post(`${backendUrl}/api/v1/gethiraganarecord/`);\n          console.log(response.data); // Sprawdź, co zwraca serwer\n      \n          if (Array.isArray(response.data) && response.data.length > 0) {\n            let idFound = false;\n      \n            for (let i = 0; i < response.data.length; i++) {\n              let e = response.data[i];\n      \n              // Dodaj warunek sprawdzający, czy 'id' jest większe lub równe zeru\n              if (e && typeof e.id !== 'undefined' && e.id >= 0) {\n                let lid = e.id;\n                let lhiraganaRomaji = e.hiraganaRomaji;\n                let lhiraganaImage = e.hiraganaImage;\n      \n                let firstPartText = lhiraganaRomaji.substring(0, \"ERROR:\".length);\n      \n                if (firstPartText !== \"ERROR:\" && parseInt(lid, 10) === targetNumberOfLetter) {\n                  setStatus(\"OK\");\n                  setRomaji(`${lhiraganaRomaji}`);\n                  setImage(`${lhiraganaImage}`);\n                  idFound = true;\n                  break;\n                } else if (firstPartText === \"ERROR:\" && parseInt(lid, 10) === targetNumberOfLetter) {\n                  let secondPartText = lhiraganaRomaji.substring(\"ERROR:\".length, lhiraganaRomaji.length);\n                  setStatus(secondPartText);\n                  idFound = true;\n                  break;\n                }\n              } else {\n                // Kontynuuj iterację, gdy 'id' jest mniejsze niż zero\n                continue;\n              }\n            }\n      \n            if (!idFound) {\n              setStatus(\"Id nie znaleziono\");\n            }\n          } else {\n            setStatus(\"Pusta lub niepoprawna odpowiedź serwera\");\n          }\n        } catch (err) {\n          let myerror = \"Błąd połączenia sieciowego.\" + err;\n          setStatus(myerror);\n        }\n      }\n    \n    // Wywołanie funkcji z konkretnym username (np. 'john_doe')\n\n    const incrementTarget = () => {\n\n        setTargetNumberOfLetter(targetNumberOfLetter + 1);\n        getRecordById();\n\n    };\n\n    useEffect(() => {\n\n        getRecordById();\n\n    }, []);\n\n    return (\n\n        <div>\n\n            <button onClick={incrementTarget}>Pobierz Wynik</button>\n\n            <p>{targetNumberOfLetter}</p>\n            <p>{status}</p>\n            <p>{romaji}</p>\n            <p>{image}</p>\n\n        </div>\n\n    );\n    \n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
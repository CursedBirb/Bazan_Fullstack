{"ast":null,"code":"var _jsxFileName = \"C:\\\\Bazan_Fullstack-main\\\\frontend\\\\src\\\\components\\\\GetLastestScore.js\",\n  _s = $RefreshSig$();\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useState } from \"react\";\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GetLatestScores() {\n  _s();\n  const backendUrl = 'http://localhost:8081';\n  const [status, setStatus] = useState(\"OK\");\n  const [textArea, setTextArea] = useState(\"Tu powinna być zawartość bazy danych, ale jak nie to mi wciąż nie działa\");\n  var userName = localStorage.getItem('userName');\n  var password = localStorage.getItem('password');\n  async function getScore() {\n    let token = userName + \":\" + password;\n    var etoken = window.btoa(token);\n    var basicAuth = 'Basic ' + etoken;\n\n    // await axios.post(`${backendUrl}/api/v1/getlatestscore/`\n    // await axios.post(`${backendUrl}/api/v1/getlatestscore/`,\n    await axios.post(`${backendUrl}/getlatestscore/`, {}, {\n      headers: {\n        authorization: basicAuth\n      }\n    }).then(response => {\n      console.log(response.data);\n      let scoresListText = \"\";\n      response.data.forEach(e => {\n        let lid = e.id;\n        let lusername = e.username;\n        let lhiraganaScore1 = e.hiraganaScore1;\n        let lhiraganaScore2 = e.hiraganaScore2;\n        let lhiraganaScore3 = e.hiraganaScore3;\n        let lkatakanaScore1 = e.katakanaScore1;\n        let lkatakanaScore2 = e.katakanaScore2;\n        let lkatakanaScore3 = e.katakanaScore3;\n        let firstPartText = lusername.substring(0, \"ERROR:\".length);\n        if (firstPartText !== \"ERROR:\") {\n          scoresListText += `${lid}, ${lusername}, ${lhiraganaScore1}, ${lhiraganaScore2}, ${lhiraganaScore3}, ${lkatakanaScore1}, ${lkatakanaScore2}, ${lkatakanaScore3}\\n`;\n          setTextArea(scoresListText);\n          setStatus(\"OK\");\n        } else {\n          let secondPartText = lusername.substring(\"ERROR:\".length, lusername.length);\n          scoresListText = lusername + \"\\n\";\n          setTextArea(scoresListText);\n          setStatus(secondPartText);\n        }\n      });\n    }).catch(err => {\n      let myerror = \"Błąd połaczenia sieciowego.\" + err;\n      setStatus(myerror);\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      variant: \"primary\",\n      onClick: getScore,\n      children: \"  Odczytaj aktualn\\u0105 list\\u0119 przelew\\xF3w  \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n      as: \"textarea\",\n      rows: 8,\n      type: \"text\",\n      value: textArea,\n      placeholder: \"\",\n      onChange: e => setTextArea(e.target.value),\n      spellCheck: \"false\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n}\n_s(GetLatestScores, \"ag22MyGu9exeu+sFVbBqLqNqrgU=\");\n_c = GetLatestScores;\nvar _c;\n$RefreshReg$(_c, \"GetLatestScores\");","map":{"version":3,"names":["axios","React","useState","Button","Container","Form","GetLatestScores","backendUrl","status","setStatus","textArea","setTextArea","userName","localStorage","getItem","password","getScore","token","etoken","window","btoa","basicAuth","post","headers","authorization","then","response","console","log","data","scoresListText","forEach","e","lid","id","lusername","username","lhiraganaScore1","hiraganaScore1","lhiraganaScore2","hiraganaScore2","lhiraganaScore3","hiraganaScore3","lkatakanaScore1","katakanaScore1","lkatakanaScore2","katakanaScore2","lkatakanaScore3","katakanaScore3","firstPartText","substring","length","secondPartText","catch","err","myerror","target","value"],"sources":["C:/Bazan_Fullstack-main/frontend/src/components/GetLastestScore.js"],"sourcesContent":["import axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useState } from \"react\";\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\n\nexport default function GetLatestScores() {\n\n    const backendUrl = 'http://localhost:8081';\n    const [status, setStatus] = useState(\"OK\");\n    const [textArea, setTextArea] = useState(\"Tu powinna być zawartość bazy danych, ale jak nie to mi wciąż nie działa\");\n\n    var userName = localStorage.getItem('userName');\n    var password = localStorage.getItem('password');\n\n    async function getScore() {\n\n        let token = userName + \":\" + password;\n        var etoken = window.btoa(token);\n        var basicAuth = 'Basic ' + etoken;\n\n        // await axios.post(`${backendUrl}/api/v1/getlatestscore/`\n        // await axios.post(`${backendUrl}/api/v1/getlatestscore/`,\n        await axios.post(`${backendUrl}/getlatestscore/`,\n        {}, { headers: { authorization: basicAuth } } )\n            .then(response => {\n                console.log(response.data);\n\n                let scoresListText = \"\"\n\n                response.data.forEach((e) => {\n                    let lid = e.id;\n                    let lusername = e.username;\n                    let lhiraganaScore1 = e.hiraganaScore1;\n                    let lhiraganaScore2 = e.hiraganaScore2;\n                    let lhiraganaScore3 = e.hiraganaScore3;\n                    let lkatakanaScore1 = e.katakanaScore1;\n                    let lkatakanaScore2 = e.katakanaScore2;\n                    let lkatakanaScore3 = e.katakanaScore3;\n\n                    let firstPartText = lusername.substring(0, (\"ERROR:\").length);\n\n\n                    if (firstPartText !== \"ERROR:\") {\n                        scoresListText += `${lid}, ${lusername}, ${lhiraganaScore1}, ${lhiraganaScore2}, ${lhiraganaScore3}, ${lkatakanaScore1}, ${lkatakanaScore2}, ${lkatakanaScore3}\\n`;\n                        setTextArea(scoresListText);\n                        setStatus(\"OK\");\n                    }\n                    else {\n                        let secondPartText = lusername.substring((\"ERROR:\").length, lusername.length);\n                        scoresListText = lusername + \"\\n\";\n                        setTextArea(scoresListText);\n                        setStatus(secondPartText);\n                    }\n                })\n\n            }).catch(err => {\n\n                let myerror = \"Błąd połaczenia sieciowego.\" + err;\n                setStatus(myerror);\n            });\n\n    }\n\n    return (\n\n        <Container>\n\n            <Button variant=\"primary\" onClick={getScore}>  Odczytaj aktualną listę przelewów  </Button>\n\n            <p></p>\n\n            <Form.Control as=\"textarea\" rows={8} type=\"text\" value={textArea} placeholder=\"\" onChange={(e) => setTextArea(e.target.value)} spellCheck=\"false\" />\n\n            <p></p>\n\n        </Container>\n\n    );\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
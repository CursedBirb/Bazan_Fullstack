{"ast":null,"code":"var _jsxFileName = \"C:\\\\SKRYPTY\\\\KROSNO\\\\Modern programming techniques\\\\DRUGI_SEMESTR_2023\\\\JavaScript2023\\\\PrzykladyJSReact2023\\\\myreactapp\\\\src\\\\lifecycle\\\\MyComponentLife.js\";\nimport React, { Component } from \"react\";\n\n//Demonstracja cyklu życia komponentu\n\n//UWAGA: Dla zobaczenia wyniku działania console.log trzeba \n//użyć Chroma i włączyć w nim \"Narzedzia dla developerów\" (Ctrl+Shift+I)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass MyComponentLife extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      counter: 0\n    };\n    this.increase = this.increase.bind(this);\n\n    // etap wygenerowania stanu początkowego komponentu\n  }\n\n  increase() {\n    this.setState(prevState => ({\n      counter: prevState.counter + 1\n    }));\n  }\n  static getDerivedStateFromProps(props, state) {\n    // Aktualizacja stanu na skutek zmiany props\n\n    console.log(\"getDerivedStateFromProps - sprawdzenie props\");\n    return null;\n  }\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    // Wykorzystywana jest do wykonania operacji przed aktualizacją komponentu\n\n    console.log(\"getSnapshotBeforeUpdate - PRZED AKTUALIZACJĄ\");\n    return null;\n  }\n  componentDidMount() {\n    // Wywoływana, gdy komponent został utworzony, czyli po pierwszym wywołaniu\n    // render(). Służy do wywoływania operacji inicjujących, np. za pomocą HTTP\n\n    console.log(\"componentDidMount - MONTOWANIE\");\n  }\n  componentDidUpdate(prevProps, prevState) {\n    // Przykładowe użycie — wykonywanie akcji na podstawie informacji, czy zmienione\n    // zostały props (właściwości), np. wysłanie ponownego żądania HTTP, jeśli wykryto,\n    // iż komponent otrzymał nową wartość props\n    //Wykonywane po aktualizacji komponentu\n\n    console.log(\"componentDidUpdate - PO AKTUALIZACJI\");\n  }\n  componentWillUnmount() {\n    // Metoda używana w momencie usuwania komponentu lub na początku przy odświeżaniu\n\n    console.log(\"componentWillUnmount - USUWAM KOMPONENT\");\n  }\n  shouldComponentUpdate(nextProps, nextState) {\n    // Zwraca true lub false, decyduje o tym, czy komponent ma ponownie zostać\n    // wyrenderowany (wyświetlony). Dzięki niej możemy np. z powodów wydajnościowych\n    // zablokować ponowne renderowane. Uruchamiana jest w momencie uzyskania nowych\n    // props lub zmiany stanu\n\n    //Tutaj dla przykładu, właczamy aktualizację widoku tylko wtedy, gdy wartość licznika przed zmianą jest liczbą nieparzystą\n    //Zatem pokazywane są tylko liczby parzyste (po zmianie)\n\n    if (this.state.counter % 2 == 0) {\n      console.log(\"   shouldComponentUpdate - BRAK AKTUALIZACJI\");\n      return false;\n    } else {\n      console.log(\"   shouldComponentUpdate - Zlecenie AKTUALIZACJI\");\n      return true;\n    }\n  }\n\n  //Wyświetlenie lub aktualizacja widoku komponentu\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Aplikacja demonstruj\\u0105ca \\u017Cycie komponentu\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Obserwuj wyniki dzia\\u0142ania instrukcji console.log w Chrome \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Stan licznika: \", this.state.counter]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.increase,\n        children: \"Zwi\\u0119ksz o jeden\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default MyComponentLife;","map":{"version":3,"names":["React","Component","MyComponentLife","constructor","props","state","counter","increase","bind","setState","prevState","getDerivedStateFromProps","console","log","getSnapshotBeforeUpdate","prevProps","componentDidMount","componentDidUpdate","componentWillUnmount","shouldComponentUpdate","nextProps","nextState","render"],"sources":["C:/SKRYPTY/KROSNO/Modern programming techniques/DRUGI_SEMESTR_2023/JavaScript2023/PrzykladyJSReact2023/myreactapp/src/lifecycle/MyComponentLife.js"],"sourcesContent":["import React, { Component } from \"react\";\r\n\r\n//Demonstracja cyklu życia komponentu\r\n\r\n//UWAGA: Dla zobaczenia wyniku działania console.log trzeba \r\n//użyć Chroma i włączyć w nim \"Narzedzia dla developerów\" (Ctrl+Shift+I)\r\n\r\n\r\nclass MyComponentLife extends Component\r\n{\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            counter: 0\r\n        }\r\n\r\n        this.increase = this.increase.bind(this);\r\n        \r\n        // etap wygenerowania stanu początkowego komponentu\r\n        \r\n    }\r\n\r\n    increase() {                            \r\n        this.setState((prevState) => ({\r\n            counter: prevState.counter + 1\r\n        }));        \r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        \r\n        // Aktualizacja stanu na skutek zmiany props\r\n        \r\n        console.log(\"getDerivedStateFromProps - sprawdzenie props\");\r\n\r\n        return null;\r\n    }\r\n    \r\n    getSnapshotBeforeUpdate(prevProps, prevState) {\r\n        \r\n        // Wykorzystywana jest do wykonania operacji przed aktualizacją komponentu\r\n\r\n        console.log(\"getSnapshotBeforeUpdate - PRZED AKTUALIZACJĄ\");\r\n\r\n        return null;        \r\n    }\r\n\r\n  \r\n\r\n    componentDidMount() {\r\n        \r\n        // Wywoływana, gdy komponent został utworzony, czyli po pierwszym wywołaniu\r\n        // render(). Służy do wywoływania operacji inicjujących, np. za pomocą HTTP\r\n\r\n        console.log(\"componentDidMount - MONTOWANIE\");\r\n        \r\n        \r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        \r\n        // Przykładowe użycie — wykonywanie akcji na podstawie informacji, czy zmienione\r\n        // zostały props (właściwości), np. wysłanie ponownego żądania HTTP, jeśli wykryto,\r\n        // iż komponent otrzymał nową wartość props\r\n        //Wykonywane po aktualizacji komponentu\r\n\r\n        \r\n        console.log(\"componentDidUpdate - PO AKTUALIZACJI\");\r\n        \r\n    }\r\n\r\n    componentWillUnmount() {\r\n        \r\n        // Metoda używana w momencie usuwania komponentu lub na początku przy odświeżaniu\r\n\r\n        console.log(\"componentWillUnmount - USUWAM KOMPONENT\");\r\n\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        \r\n        // Zwraca true lub false, decyduje o tym, czy komponent ma ponownie zostać\r\n        // wyrenderowany (wyświetlony). Dzięki niej możemy np. z powodów wydajnościowych\r\n        // zablokować ponowne renderowane. Uruchamiana jest w momencie uzyskania nowych\r\n        // props lub zmiany stanu\r\n\r\n        //Tutaj dla przykładu, właczamy aktualizację widoku tylko wtedy, gdy wartość licznika przed zmianą jest liczbą nieparzystą\r\n        //Zatem pokazywane są tylko liczby parzyste (po zmianie)\r\n        \r\n        \r\n        if (this.state.counter % 2 == 0) {\r\n            console.log(\"   shouldComponentUpdate - BRAK AKTUALIZACJI\");\r\n            return false;\r\n        }\r\n        else {\r\n\r\n            console.log(\"   shouldComponentUpdate - Zlecenie AKTUALIZACJI\");\r\n            return true;\r\n        }\r\n    }\r\n\r\n    //Wyświetlenie lub aktualizacja widoku komponentu\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Aplikacja demonstrująca życie komponentu</h2>\r\n                <h3>Obserwuj wyniki działania instrukcji console.log w Chrome </h3>\r\n                <p></p>\r\n                <h3>Stan licznika: {this.state.counter}</h3>\r\n                <button onClick={this.increase}>Zwiększ o jeden</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default MyComponentLife;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;;AAExC;;AAEA;AACA;AAAA;AAGA,MAAMC,eAAe,SAASD,SAAS,CACvC;EACIE,WAAW,CAACC,KAAK,EAAE;IACf,KAAK,CAACA,KAAK,CAAC;IAEZ,IAAI,CAACC,KAAK,GAAG;MACTC,OAAO,EAAE;IACb,CAAC;IAED,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACC,IAAI,CAAC,IAAI,CAAC;;IAExC;EAEJ;;EAEAD,QAAQ,GAAG;IACP,IAAI,CAACE,QAAQ,CAAEC,SAAS,KAAM;MAC1BJ,OAAO,EAAEI,SAAS,CAACJ,OAAO,GAAG;IACjC,CAAC,CAAC,CAAC;EACP;EAEA,OAAOK,wBAAwB,CAACP,KAAK,EAAEC,KAAK,EAAE;IAE1C;;IAEAO,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC;IAE3D,OAAO,IAAI;EACf;EAEAC,uBAAuB,CAACC,SAAS,EAAEL,SAAS,EAAE;IAE1C;;IAEAE,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC;IAE3D,OAAO,IAAI;EACf;EAIAG,iBAAiB,GAAG;IAEhB;IACA;;IAEAJ,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;EAGjD;EAEAI,kBAAkB,CAACF,SAAS,EAAEL,SAAS,EAAE;IAErC;IACA;IACA;IACA;;IAGAE,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;EAEvD;EAEAK,oBAAoB,GAAG;IAEnB;;IAEAN,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;EAE1D;EAEAM,qBAAqB,CAACC,SAAS,EAAEC,SAAS,EAAE;IAExC;IACA;IACA;IACA;;IAEA;IACA;;IAGA,IAAI,IAAI,CAAChB,KAAK,CAACC,OAAO,GAAG,CAAC,IAAI,CAAC,EAAE;MAC7BM,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC;MAC3D,OAAO,KAAK;IAChB,CAAC,MACI;MAEDD,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC;MAC/D,OAAO,IAAI;IACf;EACJ;;EAEA;EACAS,MAAM,GAAG;IACL,oBACI;MAAA,wBACI;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAiD,eACjD;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAmE,eACnE;QAAA;QAAA;QAAA;MAAA,QAAO,eACP;QAAA,8BAAoB,IAAI,CAACjB,KAAK,CAACC,OAAO;MAAA;QAAA;QAAA;QAAA;MAAA,QAAM,eAC5C;QAAQ,OAAO,EAAE,IAAI,CAACC,QAAS;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAyB;IAAA;MAAA;MAAA;MAAA;IAAA,QACtD;EAEd;AAEJ;AAEA,eAAeL,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}
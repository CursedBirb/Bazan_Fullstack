{"ast":null,"code":"var _jsxFileName = \"C:\\\\SKRYPTY\\\\KROSNO\\\\TypeScript\\\\ProjektTS\\\\PrzykladyTSReact\\\\myreactapp\\\\src\\\\testredux\\\\ContextApp.tsx\";\nimport React, { Component } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n;\nvar Lang = /*#__PURE__*/React.createContext('lang');\nconst translate = (lang, str) => {\n  var map = {\n    pl: {\n      open: 'Otwórz',\n      close: 'Zamknij'\n    },\n    en: {\n      open: 'Open',\n      close: 'Close'\n    }\n  };\n  return map[lang][str];\n};\nfunction LocalizedButton(props) {\n  return /*#__PURE__*/_jsxDEV(Lang.Consumer, {\n    children: lang => /*#__PURE__*/_jsxDEV(\"button\", {\n      ...props,\n      children: translate(lang, props.label)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 11\n  }, this);\n}\n_c = LocalizedButton;\nfunction Toolbar(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(LocalizedButton, {\n      label: \"open\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_c2 = Toolbar;\n;\nclass ContextApp extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lang: 'en'\n    };\n    this.change = this.change.bind(this);\n  }\n  change(e) {\n    this.setState({\n      lang: e.target.value\n    });\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        value: this.state.lang,\n        onChange: this.change,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"pl\",\n          children: \"Polski\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"en\",\n          children: \"English\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Lang.Provider, {\n        value: this.state.lang,\n        children: /*#__PURE__*/_jsxDEV(Toolbar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 16\n    }, this);\n  }\n}\nexport default ContextApp;\n\n/*\r\nconst ExampleContext = React.createContext('');\r\n\r\nclass Classes extends React.Component {\r\n    static contextType = ExampleContext;\r\n    render() {\r\n        return (\r\n            <Container>\r\n                \r\n                <h3>Klasa {this.context} </h3>                            \r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nfunction Example() {\r\n    <ExampleContext.Provider value={'https://magicweb.pl'}>\r\n        <Classes/>\r\n    </ExampleContext.Provider>\r\n}\r\nexport default Example;\r\n*/\nvar _c, _c2;\n$RefreshReg$(_c, \"LocalizedButton\");\n$RefreshReg$(_c2, \"Toolbar\");","map":{"version":3,"names":["React","Component","Lang","createContext","translate","lang","str","map","pl","open","close","en","LocalizedButton","props","label","Toolbar","ContextApp","constructor","state","change","bind","e","setState","target","value","render"],"sources":["C:/SKRYPTY/KROSNO/TypeScript/ProjektTS/PrzykladyTSReact/myreactapp/src/testredux/ContextApp.tsx"],"sourcesContent":["import React, { Component, FormEvent, ChangeEvent } from \"react\";\r\nimport Container from 'react-bootstrap/Container';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\ninterface Props {  \r\n    label : string;      \r\n};\r\n\r\nvar Lang = React.createContext('lang');\r\n\r\nconst translate = (lang : string, str : string) => {\r\n   var map = {\r\n      pl: {\r\n         open: 'Otwórz',\r\n         close: 'Zamknij'\r\n      },\r\n      en: {\r\n         open: 'Open',\r\n         close: 'Close'\r\n      }\r\n   };\r\n   return map[lang][str];\r\n}\r\n\r\nfunction LocalizedButton(props : Props) {\r\n   return <Lang.Consumer>\r\n       {lang => <button {...props}>{translate(lang, props.label)}</button>}\r\n   </Lang.Consumer>\r\n}\r\n\r\nfunction Toolbar(props) {\r\n  return (\r\n    <div>\r\n      <LocalizedButton label=\"open\" />\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\ninterface GProps {        \r\n};\r\n\r\ninterface State {\r\n    lang: string;     \r\n}\r\n\r\n\r\nclass ContextApp extends Component<GProps, State> {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {lang: 'en'};\r\n        this.change = this.change.bind(this);\r\n    }\r\n    change(e : ChangeEvent<HTMLSelectElement>) {\r\n        this.setState({lang: e.target.value});\r\n    }\r\n    render() {\r\n        return <div>\r\n            <select value={this.state.lang} onChange={this.change}>\r\n                <option value=\"pl\">Polski</option>\r\n                <option value=\"en\">English</option>\r\n            </select>\r\n            <Lang.Provider value={this.state.lang}>\r\n                <Toolbar/>\r\n            </Lang.Provider>\r\n        </div>\r\n    }\r\n}\r\n\r\n\r\nexport default ContextApp;\r\n\r\n/*\r\nconst ExampleContext = React.createContext('');\r\n\r\nclass Classes extends React.Component {\r\n    static contextType = ExampleContext;\r\n    render() {\r\n        return (\r\n            <Container>\r\n                \r\n                <h3>Klasa {this.context} </h3>                            \r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nfunction Example() {\r\n    <ExampleContext.Provider value={'https://magicweb.pl'}>\r\n        <Classes/>\r\n    </ExampleContext.Provider>\r\n}\r\nexport default Example;\r\n*/"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAgC,OAAO;AAIhE,OAAO,sCAAsC;AAAC;AAK7C;AAED,IAAIC,IAAI,gBAAGF,KAAK,CAACG,aAAa,CAAC,MAAM,CAAC;AAEtC,MAAMC,SAAS,GAAG,CAACC,IAAa,EAAEC,GAAY,KAAK;EAChD,IAAIC,GAAG,GAAG;IACPC,EAAE,EAAE;MACDC,IAAI,EAAE,QAAQ;MACdC,KAAK,EAAE;IACV,CAAC;IACDC,EAAE,EAAE;MACDF,IAAI,EAAE,MAAM;MACZC,KAAK,EAAE;IACV;EACH,CAAC;EACD,OAAOH,GAAG,CAACF,IAAI,CAAC,CAACC,GAAG,CAAC;AACxB,CAAC;AAED,SAASM,eAAe,CAACC,KAAa,EAAE;EACrC,oBAAO,QAAC,IAAI,CAAC,QAAQ;IAAA,UAChBR,IAAI,iBAAI;MAAA,GAAYQ,KAAK;MAAA,UAAGT,SAAS,CAACC,IAAI,EAAEQ,KAAK,CAACC,KAAK;IAAC;MAAA;MAAA;MAAA;IAAA;EAAU;IAAA;IAAA;IAAA;EAAA,QACvD;AACnB;AAAC,KAJQF,eAAe;AAMxB,SAASG,OAAO,CAACF,KAAK,EAAE;EACtB,oBACE;IAAA,uBACE,QAAC,eAAe;MAAC,KAAK,EAAC;IAAM;MAAA;MAAA;MAAA;IAAA;EAAG;IAAA;IAAA;IAAA;EAAA,QAC5B;AAEV;AAAC,MANQE,OAAO;AAUf;AAOD,MAAMC,UAAU,SAASf,SAAS,CAAgB;EAC9CgB,WAAW,CAACJ,KAAK,EAAE;IACf,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACK,KAAK,GAAG;MAACb,IAAI,EAAE;IAAI,CAAC;IACzB,IAAI,CAACc,MAAM,GAAG,IAAI,CAACA,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC;EACxC;EACAD,MAAM,CAACE,CAAkC,EAAE;IACvC,IAAI,CAACC,QAAQ,CAAC;MAACjB,IAAI,EAAEgB,CAAC,CAACE,MAAM,CAACC;IAAK,CAAC,CAAC;EACzC;EACAC,MAAM,GAAG;IACL,oBAAO;MAAA,wBACH;QAAQ,KAAK,EAAE,IAAI,CAACP,KAAK,CAACb,IAAK;QAAC,QAAQ,EAAE,IAAI,CAACc,MAAO;QAAA,wBAClD;UAAQ,KAAK,EAAC,IAAI;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAgB,eAClC;UAAQ,KAAK,EAAC,IAAI;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAiB;MAAA;QAAA;QAAA;QAAA;MAAA,QAC9B,eACT,QAAC,IAAI,CAAC,QAAQ;QAAC,KAAK,EAAE,IAAI,CAACD,KAAK,CAACb,IAAK;QAAA,uBAClC,QAAC,OAAO;UAAA;UAAA;UAAA;QAAA;MAAE;QAAA;QAAA;QAAA;MAAA,QACE;IAAA;MAAA;MAAA;MAAA;IAAA,QACd;EACV;AACJ;AAGA,eAAeW,UAAU;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
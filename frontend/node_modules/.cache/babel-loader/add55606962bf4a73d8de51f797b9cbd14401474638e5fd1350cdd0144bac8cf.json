{"ast":null,"code":"import 'bootstrap/dist/css/bootstrap.min.css';\n\n/*\r\nclass ChatConnectionData\r\n{\r\n    private textOne : string;\r\n    private textTwo : string;\r\n\r\n    constructor(textOne : string,textTwo: string) {  \r\n        this.textOne = textOne;\r\n        this.textTwo = textTwo;\r\n    }\r\n\r\n    setOne(text : string) : void{\r\n        this.textOne = text;        \r\n    }\r\n\r\n    setTwo(text : string) : void{\r\n        this.textTwo = text;        \r\n    }\r\n\r\n    getOne() : string{\r\n        return this.textOne;\r\n    }\r\n\r\n    getTwo() : string{\r\n        return this.textTwo;\r\n    }\r\n\r\n\r\n}\r\n\r\n//-------------------------\r\n\r\ninterface UProps {\r\n    connection : ChatConnectionData;    \r\n    id : string\r\n    callback : () => void;        \r\n};\r\n\r\ninterface UState {  \r\n    value : string;\r\n    id : string;\r\n}\r\n\r\n\r\nclass UserForm extends Component<UProps, UState>\r\n{\r\n  constructor(props: UProps) {\r\n    super(props);\r\n    \r\n    if (props.id===\"one\")\r\n    {\r\n        this.state = { value: props.connection.getOne(), id :props.id };\r\n    }\r\n    else{\r\n        this.state = { value: props.connection.getTwo(), id :props.id  };\r\n    }\r\n\r\n    \r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n\r\n  }\r\n\r\n  handleChange(e: ChangeEvent<HTMLInputElement>): void {\r\n    //alert('Zmiana: ' + e.target.value);   \r\n    this.setState({ value: e.target.value });\r\n  }\r\n\r\n\r\n  handleSubmit(event: FormEvent<HTMLFormElement>): void {    \r\n    \r\n    \r\n\r\n    if (this.state.id===\"one\")\r\n    {\r\n        this.props.connection.setTwo(this.state.value);            \r\n    }\r\n    else{\r\n        this.props.connection.setOne(this.state.value);                    \r\n    }\r\n\r\n    this.\r\n    \r\n    this.props.callback();        \r\n    event.preventDefault();\r\n    \r\n  }\r\n\r\n  render() {\r\n    return (\r\n\r\n      <Container>\r\n\r\n        \r\n        <h3>Telefonwania: {this.props.connection.getOne()} </h3>\r\n\r\n        <Form onSubmit={this.handleSubmit}>\r\n          <Form.Group className=\"auto\" onSubmit={this.handleSubmit}>\r\n            <Form.Label>Podaj tekst:</Form.Label>\r\n            <Form.Control type=\"text\" value={this.state.value} placeholder=\"\" onChange={this.handleChange} />\r\n          </Form.Group>\r\n          <p></p>\r\n          <Button variant=\"primary\" type=\"submit\">  Potwierdź  </Button>\r\n        </Form > \r\n        \r\n        <p>-------------------------------</p>           \r\n\r\n      </Container>\r\n\r\n    );\r\n  }\r\n}\r\n\r\n\r\n//==================================\r\n\r\ninterface Props {   \r\n    \r\n};\r\n\r\ninterface State {    \r\n    connection : ChatConnectionData;\r\n    title : string;\r\n}\r\n\r\n\r\n// <UserForm connection={this.state.connection} id={\"one\"} />\r\n//<UserForm connection={this.state.connection} id={\"two\"} />\r\n                \r\n\r\nclass PChat extends Component<Props, State>\r\n{\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = { title: \"TYTUL\", connection : new ChatConnectionData(\"ala\",\"ola\") };\r\n     \r\n        //this.handleShow = this.handleShow.bind(this);\r\n\r\n\r\n    }\r\n\r\n    update() : void{\r\n        \r\n        console.log(\"jjjjjjjjjjjjjjje111\");\r\n        //this.setState({ title: this.state.title+\" A\" });\r\n        \r\n        //alert(\"update\");\r\n        this.render();\r\n\r\n        console.log(\"jjjjjjjjjjjjjjje222\");\r\n        \r\n    }\r\n\r\n   \r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n                <h3>Telefon pomiędzy komponentami {this.state.title} </h3>\r\n                                \r\n                <UserForm connection={this.state.connection} id={\"one\"} callback={this.update} />\r\n               \r\n                <UserForm connection={this.state.connection} id={\"two\"} callback={this.update}/>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default PChat;\r\n*/","map":{"version":3,"names":[],"sources":["C:/SKRYPTY/KROSNO/TypeScript/ProjektTS/PrzykladyTSReact/myreactapp/src/pchat/PChat.tsx"],"sourcesContent":["import React, { Component, FormEvent, ChangeEvent } from \"react\";\r\nimport Container from 'react-bootstrap/Container';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n/*\r\nclass ChatConnectionData\r\n{\r\n    private textOne : string;\r\n    private textTwo : string;\r\n\r\n    constructor(textOne : string,textTwo: string) {  \r\n        this.textOne = textOne;\r\n        this.textTwo = textTwo;\r\n    }\r\n\r\n    setOne(text : string) : void{\r\n        this.textOne = text;        \r\n    }\r\n\r\n    setTwo(text : string) : void{\r\n        this.textTwo = text;        \r\n    }\r\n\r\n    getOne() : string{\r\n        return this.textOne;\r\n    }\r\n\r\n    getTwo() : string{\r\n        return this.textTwo;\r\n    }\r\n\r\n\r\n}\r\n\r\n//-------------------------\r\n\r\ninterface UProps {\r\n    connection : ChatConnectionData;    \r\n    id : string\r\n    callback : () => void;        \r\n};\r\n\r\ninterface UState {  \r\n    value : string;\r\n    id : string;\r\n}\r\n\r\n\r\nclass UserForm extends Component<UProps, UState>\r\n{\r\n  constructor(props: UProps) {\r\n    super(props);\r\n    \r\n    if (props.id===\"one\")\r\n    {\r\n        this.state = { value: props.connection.getOne(), id :props.id };\r\n    }\r\n    else{\r\n        this.state = { value: props.connection.getTwo(), id :props.id  };\r\n    }\r\n\r\n    \r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n\r\n  }\r\n\r\n  handleChange(e: ChangeEvent<HTMLInputElement>): void {\r\n    //alert('Zmiana: ' + e.target.value);   \r\n    this.setState({ value: e.target.value });\r\n  }\r\n\r\n\r\n  handleSubmit(event: FormEvent<HTMLFormElement>): void {    \r\n    \r\n    \r\n\r\n    if (this.state.id===\"one\")\r\n    {\r\n        this.props.connection.setTwo(this.state.value);            \r\n    }\r\n    else{\r\n        this.props.connection.setOne(this.state.value);                    \r\n    }\r\n\r\n    this.\r\n    \r\n    this.props.callback();        \r\n    event.preventDefault();\r\n    \r\n  }\r\n\r\n  render() {\r\n    return (\r\n\r\n      <Container>\r\n\r\n        \r\n        <h3>Telefonwania: {this.props.connection.getOne()} </h3>\r\n\r\n        <Form onSubmit={this.handleSubmit}>\r\n          <Form.Group className=\"auto\" onSubmit={this.handleSubmit}>\r\n            <Form.Label>Podaj tekst:</Form.Label>\r\n            <Form.Control type=\"text\" value={this.state.value} placeholder=\"\" onChange={this.handleChange} />\r\n          </Form.Group>\r\n          <p></p>\r\n          <Button variant=\"primary\" type=\"submit\">  Potwierdź  </Button>\r\n        </Form > \r\n        \r\n        <p>-------------------------------</p>           \r\n\r\n      </Container>\r\n\r\n    );\r\n  }\r\n}\r\n\r\n\r\n//==================================\r\n\r\ninterface Props {   \r\n    \r\n};\r\n\r\ninterface State {    \r\n    connection : ChatConnectionData;\r\n    title : string;\r\n}\r\n\r\n\r\n// <UserForm connection={this.state.connection} id={\"one\"} />\r\n//<UserForm connection={this.state.connection} id={\"two\"} />\r\n                \r\n\r\nclass PChat extends Component<Props, State>\r\n{\r\n    constructor(props: Props) {\r\n        super(props);\r\n        this.state = { title: \"TYTUL\", connection : new ChatConnectionData(\"ala\",\"ola\") };\r\n     \r\n        //this.handleShow = this.handleShow.bind(this);\r\n\r\n\r\n    }\r\n\r\n    update() : void{\r\n        \r\n        console.log(\"jjjjjjjjjjjjjjje111\");\r\n        //this.setState({ title: this.state.title+\" A\" });\r\n        \r\n        //alert(\"update\");\r\n        this.render();\r\n\r\n        console.log(\"jjjjjjjjjjjjjjje222\");\r\n        \r\n    }\r\n\r\n   \r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n                <h3>Telefon pomiędzy komponentami {this.state.title} </h3>\r\n                                \r\n                <UserForm connection={this.state.connection} id={\"one\"} callback={this.update} />\r\n               \r\n                <UserForm connection={this.state.connection} id={\"two\"} callback={this.update}/>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default PChat;\r\n*/"],"mappings":"AAMA,OAAO,sCAAs},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Bazan_Fullstack-main\\\\frontend\\\\src\\\\components\\\\BankTransNoAuthHook.js\",\n  _s = $RefreshSig$();\n//Klient dostępu do przelewów w banku na serwerze z użyciem usług REST bez autoryzacji (HOOK)\n//Lokalizacja bazy: http://localhost:8081/\n//W celu przetestowania klienta należy uruchomić serwer wykonany za pomoca Sprint Boot w języku Java (WEBSERVICE BANK NO AUTH)\n\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useState } from \"react\";\nimport Alert from 'react-bootstrap/Alert';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BankTransNoAuthHook() {\n  _s();\n  const [status, setStatus] = useState(\"OK\");\n  const [textArea, setTextArea] = useState(\"Brak danych\");\n  const [newClientname, setNewClientname] = useState(\"nowak\");\n  const [newDate, setNewDate] = useState(\"2022-10-30\");\n  const [newDescription, setNewDescription] = useState(\"Zakup USD\");\n  const [newAmount, setNewAmount] = useState(\"345.1\");\n  const [transferIDToDelete, setTransferIDToDelete] = useState(\"1\");\n\n  //Dodanie przelewu na serwer\n  async function addTransfer() {\n    let clientname = newClientname;\n    let date = newDate;\n    let description = newDescription;\n    let amount = newAmount;\n    if (clientname.length > 0 && date.length > 0 && description.length > 0 && amount.length > 0) {\n      await axios.post('http://localhost:8081/addtransfer/', {\n        clientname,\n        date,\n        description,\n        amount\n      } //Podajemy parametry\n      ).then(response => {\n        let text = response.data;\n        setStatus(text);\n      }).catch(err => {\n        let myerror = \"Błąd połaczenia sieciowego.\" + err;\n        setStatus(myerror);\n      });\n    } else {\n      setStatus(\"Żadna z danych wstawianego przelewu nie może być pusta\");\n    }\n  }\n\n  //Pobranie listy przelewow z serwera\n  async function getTransfers() {\n    await axios.post('http://localhost:8081/gettransfers/').then(response => {\n      let transferListText = \"\";\n      response.data.forEach(e => {\n        let lid = e.id;\n        let lclientname = e.clientname;\n        let ldate = e.date;\n        let ldescription = e.description;\n        let lamount = e.amount;\n        let firstPartText = lclientname.substring(0, \"ERROR:\".length);\n        if (firstPartText !== \"ERROR:\") {\n          transferListText = transferListText + lid + \", \" + lclientname + \", \" + ldate + \", \" + ldescription + \", \" + lamount + \"\\n\";\n          setTextArea(transferListText);\n          setStatus(\"OK\");\n        } else {\n          let secondPartText = lclientname.substring(\"ERROR:\".length, lclientname.length);\n          transferListText = lclientname + \"\\n\";\n          setTextArea(transferListText);\n          setStatus(secondPartText);\n        }\n      });\n    }).catch(err => {\n      let myerror = \"Błąd połaczenia sieciowego.\" + err;\n      setStatus(myerror);\n    });\n  }\n  async function deleteTransfer() {\n    let transferidtodelete = transferIDToDelete;\n    if (transferidtodelete.length > 0) {\n      await axios.post('http://localhost:8081/deletetransfer/', {\n        transferidtodelete\n      } //Podajemy parametr\n      ).then(response => {\n        let text = response.data;\n        setStatus(text);\n      }).catch(err => {\n        let myerror = \"Błąd połaczenia sieciowego.\" + err;\n        setStatus(myerror);\n      });\n    } else {\n      setStatus(\"ID przelewu nie może być puste\");\n    }\n  }\n  const handleSubmit = event => {\n    addTransfer();\n    event.preventDefault();\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Alert, {\n      variant: \"info\",\n      children: [/*#__PURE__*/_jsxDEV(Alert.Heading, {\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Klient dost\\u0119pu do przelew\\xF3w w banku z u\\u017Cyciem REST (bez autoryzacji, HOOK) \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 32\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this), \"Lokalizacja bazy: http://localhost:8081/\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Status: \", status]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form.Label, {\n      children: \" Dane nowego przelewu: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        className: \"auto\",\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n          children: [\" Klient: \", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"newClientname\",\n            value: newClientname,\n            onChange: e => setNewClientname(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 42\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this), ' ', /*#__PURE__*/_jsxDEV(Form.Label, {\n          children: [\" Data przelewu: \", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"newDate\",\n            value: newDate,\n            onChange: e => setNewDate(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 49\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, this), ' ', /*#__PURE__*/_jsxDEV(Form.Label, {\n          children: [\" Opis przelewu:: \", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"newDescription\",\n            value: newDescription,\n            onChange: e => setNewDescription(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 50\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }, this), ' ', /*#__PURE__*/_jsxDEV(Form.Label, {\n          children: [\" Kwota: \", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"newAmount\",\n            value: newAmount,\n            onChange: e => setNewAmount(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 41\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this), ' ', /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          type: \"submit\",\n          children: \"  Dodaj  \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      className: \"auto\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        children: [\" Podaj id przelewu do usuni\\u0119cia: \", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"transferIDToDelete\",\n          value: transferIDToDelete,\n          onChange: e => setTransferIDToDelete(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 62\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this), ' ', /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        onClick: deleteTransfer,\n        children: \"  Usu\\u0144  \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"primary\",\n      onClick: getTransfers,\n      children: \"  Odczytaj aktualn\\u0105 list\\u0119 przelew\\xF3w  \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n      as: \"textarea\",\n      rows: 8,\n      type: \"text\",\n      value: textArea,\n      placeholder: \"\",\n      onChange: e => setTextArea(e.target.value),\n      spellCheck: \"false\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 9\n  }, this);\n}\n_s(BankTransNoAuthHook, \"TnHN9cmlDoXonTzl/mqcG5m2oNo=\");\n_c = BankTransNoAuthHook;\nvar _c;\n$RefreshReg$(_c, \"BankTransNoAuthHook\");","map":{"version":3,"names":["axios","React","useState","Alert","Button","Container","Form","BankTransNoAuthHook","status","setStatus","textArea","setTextArea","newClientname","setNewClientname","newDate","setNewDate","newDescription","setNewDescription","newAmount","setNewAmount","transferIDToDelete","setTransferIDToDelete","addTransfer","clientname","date","description","amount","length","post","then","response","text","data","catch","err","myerror","getTransfers","transferListText","forEach","e","lid","id","lclientname","ldate","ldescription","lamount","firstPartText","substring","secondPartText","deleteTransfer","transferidtodelete","handleSubmit","event","preventDefault","target","value"],"sources":["C:/Bazan_Fullstack-main/frontend/src/components/BankTransNoAuthHook.js"],"sourcesContent":["//Klient dostępu do przelewów w banku na serwerze z użyciem usług REST bez autoryzacji (HOOK)\n//Lokalizacja bazy: http://localhost:8081/\n//W celu przetestowania klienta należy uruchomić serwer wykonany za pomoca Sprint Boot w języku Java (WEBSERVICE BANK NO AUTH)\n\n\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useState } from \"react\";\nimport Alert from 'react-bootstrap/Alert';\nimport Button from 'react-bootstrap/Button';\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\n\n\nexport default function BankTransNoAuthHook() {\n\n\n    const [status, setStatus] = useState(\"OK\");\n    const [textArea, setTextArea] = useState(\"Brak danych\");\n    const [newClientname, setNewClientname] = useState(\"nowak\");\n    const [newDate, setNewDate] = useState(\"2022-10-30\");\n    const [newDescription, setNewDescription] = useState(\"Zakup USD\");\n    const [newAmount, setNewAmount] = useState(\"345.1\");\n    const [transferIDToDelete, setTransferIDToDelete] = useState(\"1\");\n\n\n    //Dodanie przelewu na serwer\n    async function addTransfer() {\n\n        let clientname = newClientname;\n        let date = newDate;\n        let description = newDescription;\n        let amount = newAmount;\n\n\n        if ((clientname.length > 0) && (date.length > 0) && (description.length > 0) && (amount.length > 0)) {\n            await axios.post('http://localhost:8081/addtransfer/',\n                { clientname, date, description, amount }, //Podajemy parametry\n            )\n                .then(response => {\n                    let text = response.data;\n                    setStatus(text);\n                }).catch(err => {\n                    let myerror = \"Błąd połaczenia sieciowego.\" + err;\n                    setStatus(myerror);\n                });\n        }\n        else {\n            setStatus(\"Żadna z danych wstawianego przelewu nie może być pusta\");\n        }\n    }\n\n\n    //Pobranie listy przelewow z serwera\n    async function getTransfers() {\n\n        await axios.post('http://localhost:8081/gettransfers/')\n            .then(response => {\n\n                let transferListText = \"\"\n\n                response.data.forEach((e) => {\n                    let lid = e.id;\n                    let lclientname = e.clientname; let ldate = e.date; let ldescription = e.description; let lamount = e.amount;\n\n                    let firstPartText = lclientname.substring(0, (\"ERROR:\").length);\n\n\n                    if (firstPartText !== \"ERROR:\") {\n                        transferListText = transferListText + lid + \", \" + lclientname + \", \" + ldate + \", \" + ldescription + \", \" + lamount + \"\\n\";\n                        setTextArea(transferListText);\n                        setStatus(\"OK\");\n                    }\n                    else {\n                        let secondPartText = lclientname.substring((\"ERROR:\").length, lclientname.length);\n                        transferListText = lclientname + \"\\n\";\n                        setTextArea(transferListText);\n                        setStatus(secondPartText);\n                    }\n                })\n\n            }).catch(err => {\n\n                let myerror = \"Błąd połaczenia sieciowego.\" + err;\n                setStatus(myerror);\n            });\n\n    }\n\n\n    async function deleteTransfer() {\n\n        let transferidtodelete = transferIDToDelete;\n\n        if (transferidtodelete.length > 0) {\n\n            await axios.post('http://localhost:8081/deletetransfer/',\n                { transferidtodelete }, //Podajemy parametr\n            )\n                .then(response => {\n                    let text = response.data;\n                    setStatus(text);\n                }).catch(err => {\n                    let myerror = \"Błąd połaczenia sieciowego.\" + err;\n                    setStatus(myerror);\n                });\n        }\n        else {\n            setStatus(\"ID przelewu nie może być puste\");\n        }\n    }\n\n    const handleSubmit = (event) => {\n        addTransfer();\n        event.preventDefault();\n    }\n\n\n    return (\n\n        <Container>\n\n            <Alert variant=\"info\">\n                <Alert.Heading><strong>Klient dostępu do przelewów w banku z użyciem REST (bez autoryzacji, HOOK) </strong></Alert.Heading>\n                Lokalizacja bazy: http://localhost:8081/ \n            </Alert>\n\n            <p></p>\n\n            <h3>Status: {status}</h3>\n\n            <p></p>\n\n            <Form.Label> Dane nowego przelewu: </Form.Label>\n\n            <Form onSubmit={handleSubmit}>\n                <Form.Group className=\"auto\" onSubmit={handleSubmit}>\n                    <Form.Label> Klient: <input type=\"text\" name='newClientname' value={newClientname} onChange={(e) => setNewClientname(e.target.value)} /> </Form.Label>\n                    {' '}\n                    <Form.Label> Data przelewu: <input type=\"text\" name='newDate' value={newDate} onChange={(e) => setNewDate(e.target.value)} /> </Form.Label>\n                    {' '}\n                    <Form.Label> Opis przelewu:: <input type=\"text\" name='newDescription' value={newDescription} onChange={(e) => setNewDescription(e.target.value)} /> </Form.Label>\n                    {' '}\n                    <Form.Label> Kwota: <input type=\"text\" name='newAmount' value={newAmount} onChange={(e) => setNewAmount(e.target.value)} /> </Form.Label>\n                    {' '}\n                    <Button variant=\"primary\" type=\"submit\">  Dodaj  </Button>\n                </Form.Group>\n                <p></p>\n            </Form >\n\n            <Form.Group className=\"auto\" onSubmit={handleSubmit}>\n                <Form.Label> Podaj id przelewu do usunięcia: <input type=\"text\" name='transferIDToDelete' value={transferIDToDelete} onChange={(e) => setTransferIDToDelete(e.target.value)} /> </Form.Label>\n                {' '}\n                <Button variant=\"primary\" onClick={deleteTransfer}>  Usuń  </Button>\n            </Form.Group>\n\n            <p></p>\n\n\n            <Button variant=\"primary\" onClick={getTransfers}>  Odczytaj aktualną listę przelewów  </Button>\n\n            <p></p>\n\n            <Form.Control as=\"textarea\" rows={8} type=\"text\" value={textArea} placeholder=\"\" onChange={(e) => setTextArea(e.target.value)} spellCheck=\"false\" />\n\n            <p></p>\n\n\n        </Container>\n\n    );\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Bazan_Fullstack-main\\\\frontend\\\\src\\\\components\\\\NewAccount.js\",\n  _s = $RefreshSig$();\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useState } from \"react\";\nimport Container from 'react-bootstrap/Container';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NewAccount() {\n  _s();\n  const backendUrl = 'http://localhost:8081';\n  const [status, setStatus] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [age, setAge] = useState(\"\");\n  const [countryOfBirth, setCountryOfBirth] = useState(\"\");\n  async function addUser() {\n    if (username.length > 0 && password.length > 0 && email.length > 0 && firstName.length > 0 && lastName.length > 0 && age.length > 0 && countryOfBirth.length > 0) {\n      await axios.post(`${backendUrl}/api/adduser`, {\n        username,\n        password,\n        email,\n        firstName,\n        lastName,\n        age,\n        countryOfBirth\n      }).then(response => {}).catch(err => {\n        let myerror = \"Błąd połaczenia sieciowego.\" + err;\n        setStatus(myerror);\n      });\n    } else {\n      setStatus(\"Żadna z danych wstawianego przelewu nie może być pusta\");\n    }\n  }\n  const handleSubmit = event => {\n    addUser();\n    event.preventDefault();\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Wolololo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n}\n_s(NewAccount, \"3b3F0Kx/EXRhDd86EQHOIRRro9o=\");\n_c = NewAccount;\nvar _c;\n$RefreshReg$(_c, \"NewAccount\");","map":{"version":3,"names":["axios","React","useState","Container","NewAccount","backendUrl","status","setStatus","username","setUsername","password","setPassword","email","setEmail","firstName","setFirstName","lastName","setLastName","age","setAge","countryOfBirth","setCountryOfBirth","addUser","length","post","then","response","catch","err","myerror","handleSubmit","event","preventDefault"],"sources":["C:/Bazan_Fullstack-main/frontend/src/components/NewAccount.js"],"sourcesContent":["import axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { useState } from \"react\";\nimport Container from 'react-bootstrap/Container';\n\nexport default function NewAccount() {\n\n    const backendUrl = 'http://localhost:8081';\n    const [status, setStatus] = useState(\"\");\n    const [username, setUsername] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [email, setEmail ] = useState(\"\");\n    const [firstName, setFirstName] = useState(\"\");\n    const [lastName, setLastName] = useState(\"\");\n    const [age, setAge] = useState(\"\");\n    const [countryOfBirth, setCountryOfBirth] = useState(\"\");\n\n    async function addUser() {\n\n        if ((username.length > 0) && (password.length > 0) && (email.length > 0) && (firstName.length > 0) && (lastName.length > 0) && (age.length > 0) && (countryOfBirth.length > 0)) {\n\n            await axios.post(`${backendUrl}/api/adduser`,\n            { username, password, email, firstName, lastName, age, countryOfBirth} )\n\n                .then(response => {\n\n                }).catch(err => {\n\n                    let myerror = \"Błąd połaczenia sieciowego.\" + err;\n                    setStatus(myerror);\n\n                }\n\n            );\n\n        } else {\n\n            setStatus(\"Żadna z danych wstawianego przelewu nie może być pusta\");\n        }\n\n    }\n\n    const handleSubmit = (event) => {\n        addUser();\n        event.preventDefault();\n    }\n\n    return (\n\n        <Container>\n\n            {/* <Form onSubmit={handleSubmit}>\n\n                <Form.Group className=\"auto\" onSubmit={handleSubmit}>\n\n                    {status}\n                    <Form.Label> Username: <input type=\"text\" name='username' value={username} onChange={(e) => setUsername(e.target.value)} /> </Form.Label>\n                    {' '}\n                    <Form.Label> Password: <input type=\"text\" name='password' value={password} onChange={(e) => setPassword(e.target.value)} /> </Form.Label>\n                    {' '}\n                    <Form.Label> Email: <input type=\"text\" name='email' value={email} onChange={(e) => setEmail(e.target.value)} /> </Form.Label>\n                    {' '}\n                    <Form.Label> First Name: <input type=\"text\" name='firstName' value={firstName} onChange={(e) => setFirstName(e.target.value)} /> </Form.Label>\n                    {' '}\n                    <Form.Label> Last Name: <input type=\"text\" name='lastName' value={lastName} onChange={(e) => setLastName(e.target.value)} /> </Form.Label>\n                    {' '}\n                    <Form.Label> Age: <input type=\"text\" name='age' value={age} onChange={(e) => setAge(e.target.value)} /> </Form.Label>\n                    {' '}\n                    <Form.Label> Country of Birth: <input type=\"text\" name='countryOfBirth' value={countryOfBirth} onChange={(e) => setCountryOfBirth(e.target.value)} /> </Form.Label>\n                    {' '}\n                    <Button variant=\"primary\" type=\"submit\">  Add user  </Button>\n\n                </Form.Group>\n\n                <p></p>\n\n            </Form > */}\n            <p>Wolololo</p>\n\n        </Container>\n\n    );\n\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,sCAAsC;AAC7C,OAAOC,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,MAAM,2BAA2B;AAAC;AAElD,eAAe,SAASC,UAAU,GAAG;EAAA;EAEjC,MAAMC,UAAU,GAAG,uBAAuB;EAC1C,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACM,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAE,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACvC,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACgB,GAAG,EAAEC,MAAM,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAClC,MAAM,CAACkB,cAAc,EAAEC,iBAAiB,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAExD,eAAeoB,OAAO,GAAG;IAErB,IAAKd,QAAQ,CAACe,MAAM,GAAG,CAAC,IAAMb,QAAQ,CAACa,MAAM,GAAG,CAAE,IAAKX,KAAK,CAACW,MAAM,GAAG,CAAE,IAAKT,SAAS,CAACS,MAAM,GAAG,CAAE,IAAKP,QAAQ,CAACO,MAAM,GAAG,CAAE,IAAKL,GAAG,CAACK,MAAM,GAAG,CAAE,IAAKH,cAAc,CAACG,MAAM,GAAG,CAAE,EAAE;MAE5K,MAAMvB,KAAK,CAACwB,IAAI,CAAE,GAAEnB,UAAW,cAAa,EAC5C;QAAEG,QAAQ;QAAEE,QAAQ;QAAEE,KAAK;QAAEE,SAAS;QAAEE,QAAQ;QAAEE,GAAG;QAAEE;MAAc,CAAC,CAAE,CAEnEK,IAAI,CAACC,QAAQ,IAAI,CAElB,CAAC,CAAC,CAACC,KAAK,CAACC,GAAG,IAAI;QAEZ,IAAIC,OAAO,GAAG,6BAA6B,GAAGD,GAAG;QACjDrB,SAAS,CAACsB,OAAO,CAAC;MAEtB,CAAC,CAEJ;IAEL,CAAC,MAAM;MAEHtB,SAAS,CAAC,wDAAwD,CAAC;IACvE;EAEJ;EAEA,MAAMuB,YAAY,GAAIC,KAAK,IAAK;IAC5BT,OAAO,EAAE;IACTS,KAAK,CAACC,cAAc,EAAE;EAC1B,CAAC;EAED,oBAEI,QAAC,SAAS;IAAA,uBA4BN;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAe;IAAA;IAAA;IAAA;EAAA,QAEP;AAIpB;AAAC,GA9EuB5B,UAAU;AAAA,KAAVA,UAAU;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}